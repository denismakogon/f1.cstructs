// Generated by jextract

package f1.cstructs.year2021;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FinalClassificationData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("m_position"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numLaps"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gridPosition"),
        Constants$root.C_CHAR$LAYOUT.withName("m_points"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numPitStops"),
        Constants$root.C_CHAR$LAYOUT.withName("m_resultStatus"),
        Constants$root.C_INT$LAYOUT.withName("m_bestLapTimeInMS"),
        Constants$root.C_DOUBLE$LAYOUT.withName("m_totalRaceTime"),
        Constants$root.C_CHAR$LAYOUT.withName("m_penaltiesTime"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numPenalties"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numTyreStints"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("m_tyreStintsActual"),
        MemoryLayout.sequenceLayout(8, Constants$root.C_CHAR$LAYOUT).withName("m_tyreStintsVisual")
    ).withName("FinalClassificationData");
    public static MemoryLayout $LAYOUT() {
        return FinalClassificationData.$struct$LAYOUT;
    }
    static final VarHandle m_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_position"));
    public static VarHandle m_position$VH() {
        return FinalClassificationData.m_position$VH;
    }
    public static byte m_position$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_position$VH.get(seg);
    }
    public static void m_position$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_position$VH.set(seg, x);
    }
    public static byte m_position$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_position$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numLaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numLaps"));
    public static VarHandle m_numLaps$VH() {
        return FinalClassificationData.m_numLaps$VH;
    }
    public static byte m_numLaps$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_numLaps$VH.get(seg);
    }
    public static void m_numLaps$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_numLaps$VH.set(seg, x);
    }
    public static byte m_numLaps$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_numLaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numLaps$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_numLaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gridPosition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gridPosition"));
    public static VarHandle m_gridPosition$VH() {
        return FinalClassificationData.m_gridPosition$VH;
    }
    public static byte m_gridPosition$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_gridPosition$VH.get(seg);
    }
    public static void m_gridPosition$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_gridPosition$VH.set(seg, x);
    }
    public static byte m_gridPosition$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_gridPosition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gridPosition$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_gridPosition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_points$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_points"));
    public static VarHandle m_points$VH() {
        return FinalClassificationData.m_points$VH;
    }
    public static byte m_points$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_points$VH.get(seg);
    }
    public static void m_points$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_points$VH.set(seg, x);
    }
    public static byte m_points$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_points$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_points$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_points$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numPitStops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numPitStops"));
    public static VarHandle m_numPitStops$VH() {
        return FinalClassificationData.m_numPitStops$VH;
    }
    public static byte m_numPitStops$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_numPitStops$VH.get(seg);
    }
    public static void m_numPitStops$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_numPitStops$VH.set(seg, x);
    }
    public static byte m_numPitStops$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_numPitStops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numPitStops$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_numPitStops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_resultStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_resultStatus"));
    public static VarHandle m_resultStatus$VH() {
        return FinalClassificationData.m_resultStatus$VH;
    }
    public static byte m_resultStatus$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_resultStatus$VH.get(seg);
    }
    public static void m_resultStatus$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_resultStatus$VH.set(seg, x);
    }
    public static byte m_resultStatus$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_resultStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_resultStatus$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_resultStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_bestLapTimeInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bestLapTimeInMS"));
    public static VarHandle m_bestLapTimeInMS$VH() {
        return FinalClassificationData.m_bestLapTimeInMS$VH;
    }
    public static int m_bestLapTimeInMS$get(MemorySegment seg) {
        return (int)FinalClassificationData.m_bestLapTimeInMS$VH.get(seg);
    }
    public static void m_bestLapTimeInMS$set( MemorySegment seg, int x) {
        FinalClassificationData.m_bestLapTimeInMS$VH.set(seg, x);
    }
    public static int m_bestLapTimeInMS$get(MemorySegment seg, long index) {
        return (int)FinalClassificationData.m_bestLapTimeInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bestLapTimeInMS$set(MemorySegment seg, long index, int x) {
        FinalClassificationData.m_bestLapTimeInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_totalRaceTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_totalRaceTime"));
    public static VarHandle m_totalRaceTime$VH() {
        return FinalClassificationData.m_totalRaceTime$VH;
    }
    public static double m_totalRaceTime$get(MemorySegment seg) {
        return (double)FinalClassificationData.m_totalRaceTime$VH.get(seg);
    }
    public static void m_totalRaceTime$set( MemorySegment seg, double x) {
        FinalClassificationData.m_totalRaceTime$VH.set(seg, x);
    }
    public static double m_totalRaceTime$get(MemorySegment seg, long index) {
        return (double)FinalClassificationData.m_totalRaceTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_totalRaceTime$set(MemorySegment seg, long index, double x) {
        FinalClassificationData.m_totalRaceTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_penaltiesTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_penaltiesTime"));
    public static VarHandle m_penaltiesTime$VH() {
        return FinalClassificationData.m_penaltiesTime$VH;
    }
    public static byte m_penaltiesTime$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_penaltiesTime$VH.get(seg);
    }
    public static void m_penaltiesTime$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_penaltiesTime$VH.set(seg, x);
    }
    public static byte m_penaltiesTime$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_penaltiesTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_penaltiesTime$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_penaltiesTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numPenalties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numPenalties"));
    public static VarHandle m_numPenalties$VH() {
        return FinalClassificationData.m_numPenalties$VH;
    }
    public static byte m_numPenalties$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_numPenalties$VH.get(seg);
    }
    public static void m_numPenalties$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_numPenalties$VH.set(seg, x);
    }
    public static byte m_numPenalties$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_numPenalties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numPenalties$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_numPenalties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numTyreStints$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numTyreStints"));
    public static VarHandle m_numTyreStints$VH() {
        return FinalClassificationData.m_numTyreStints$VH;
    }
    public static byte m_numTyreStints$get(MemorySegment seg) {
        return (byte)FinalClassificationData.m_numTyreStints$VH.get(seg);
    }
    public static void m_numTyreStints$set( MemorySegment seg, byte x) {
        FinalClassificationData.m_numTyreStints$VH.set(seg, x);
    }
    public static byte m_numTyreStints$get(MemorySegment seg, long index) {
        return (byte)FinalClassificationData.m_numTyreStints$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numTyreStints$set(MemorySegment seg, long index, byte x) {
        FinalClassificationData.m_numTyreStints$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_tyreStintsActual$slice(MemorySegment seg) {
        return seg.asSlice(21, 8);
    }
    public static MemorySegment m_tyreStintsVisual$slice(MemorySegment seg) {
        return seg.asSlice(29, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


