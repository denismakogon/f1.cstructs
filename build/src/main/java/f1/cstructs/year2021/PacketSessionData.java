// Generated by jextract

package f1.cstructs.year2021;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketSessionData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        Constants$root.C_CHAR$LAYOUT.withName("m_weather"),
        Constants$root.C_CHAR$LAYOUT.withName("m_trackTemperature"),
        Constants$root.C_CHAR$LAYOUT.withName("m_airTemperature"),
        Constants$root.C_CHAR$LAYOUT.withName("m_totalLaps"),
        Constants$root.C_SHORT$LAYOUT.withName("m_trackLength"),
        Constants$root.C_CHAR$LAYOUT.withName("m_sessionType"),
        Constants$root.C_CHAR$LAYOUT.withName("m_trackId"),
        Constants$root.C_CHAR$LAYOUT.withName("m_formula"),
        Constants$root.C_SHORT$LAYOUT.withName("m_sessionTimeLeft"),
        Constants$root.C_SHORT$LAYOUT.withName("m_sessionDuration"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitSpeedLimit"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gamePaused"),
        Constants$root.C_CHAR$LAYOUT.withName("m_isSpectating"),
        Constants$root.C_CHAR$LAYOUT.withName("m_spectatorCarIndex"),
        Constants$root.C_CHAR$LAYOUT.withName("m_sliProNativeSupport"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numMarshalZones"),
        MemoryLayout.sequenceLayout(21, MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("m_zoneStart"),
            Constants$root.C_CHAR$LAYOUT.withName("m_zoneFlag")
        ).withName("MarshalZone")).withName("m_marshalZones"),
        Constants$root.C_CHAR$LAYOUT.withName("m_safetyCarStatus"),
        Constants$root.C_CHAR$LAYOUT.withName("m_networkGame"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numWeatherForecastSamples"),
        MemoryLayout.sequenceLayout(56, MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("m_sessionType"),
            Constants$root.C_CHAR$LAYOUT.withName("m_timeOffset"),
            Constants$root.C_CHAR$LAYOUT.withName("m_weather"),
            Constants$root.C_CHAR$LAYOUT.withName("m_trackTemperature"),
            Constants$root.C_CHAR$LAYOUT.withName("m_trackTemperatureChange"),
            Constants$root.C_CHAR$LAYOUT.withName("m_airTemperature"),
            Constants$root.C_CHAR$LAYOUT.withName("m_airTemperatureChange"),
            Constants$root.C_CHAR$LAYOUT.withName("m_rainPercentage")
        ).withName("WeatherForecastSample")).withName("m_weatherForecastSamples"),
        Constants$root.C_CHAR$LAYOUT.withName("m_forecastAccuracy"),
        Constants$root.C_CHAR$LAYOUT.withName("m_aiDifficulty"),
        Constants$root.C_INT$LAYOUT.withName("m_seasonLinkIdentifier"),
        Constants$root.C_INT$LAYOUT.withName("m_weekendLinkIdentifier"),
        Constants$root.C_INT$LAYOUT.withName("m_sessionLinkIdentifier"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitStopWindowIdealLap"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitStopWindowLatestLap"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitStopRejoinPosition"),
        Constants$root.C_CHAR$LAYOUT.withName("m_steeringAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_brakingAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gearboxAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitReleaseAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_ERSAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_DRSAssist"),
        Constants$root.C_CHAR$LAYOUT.withName("m_dynamicRacingLine"),
        Constants$root.C_CHAR$LAYOUT.withName("m_dynamicRacingLineType")
    ).withName("PacketSessionData");
    public static MemoryLayout $LAYOUT() {
        return PacketSessionData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle m_weather$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_weather"));
    public static VarHandle m_weather$VH() {
        return PacketSessionData.m_weather$VH;
    }
    public static byte m_weather$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_weather$VH.get(seg);
    }
    public static void m_weather$set( MemorySegment seg, byte x) {
        PacketSessionData.m_weather$VH.set(seg, x);
    }
    public static byte m_weather$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_weather$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_weather$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_weather$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_trackTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_trackTemperature"));
    public static VarHandle m_trackTemperature$VH() {
        return PacketSessionData.m_trackTemperature$VH;
    }
    public static byte m_trackTemperature$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_trackTemperature$VH.get(seg);
    }
    public static void m_trackTemperature$set( MemorySegment seg, byte x) {
        PacketSessionData.m_trackTemperature$VH.set(seg, x);
    }
    public static byte m_trackTemperature$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_trackTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_trackTemperature$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_trackTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_airTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_airTemperature"));
    public static VarHandle m_airTemperature$VH() {
        return PacketSessionData.m_airTemperature$VH;
    }
    public static byte m_airTemperature$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_airTemperature$VH.get(seg);
    }
    public static void m_airTemperature$set( MemorySegment seg, byte x) {
        PacketSessionData.m_airTemperature$VH.set(seg, x);
    }
    public static byte m_airTemperature$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_airTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_airTemperature$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_airTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_totalLaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_totalLaps"));
    public static VarHandle m_totalLaps$VH() {
        return PacketSessionData.m_totalLaps$VH;
    }
    public static byte m_totalLaps$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_totalLaps$VH.get(seg);
    }
    public static void m_totalLaps$set( MemorySegment seg, byte x) {
        PacketSessionData.m_totalLaps$VH.set(seg, x);
    }
    public static byte m_totalLaps$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_totalLaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_totalLaps$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_totalLaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_trackLength$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_trackLength"));
    public static VarHandle m_trackLength$VH() {
        return PacketSessionData.m_trackLength$VH;
    }
    public static short m_trackLength$get(MemorySegment seg) {
        return (short)PacketSessionData.m_trackLength$VH.get(seg);
    }
    public static void m_trackLength$set( MemorySegment seg, short x) {
        PacketSessionData.m_trackLength$VH.set(seg, x);
    }
    public static short m_trackLength$get(MemorySegment seg, long index) {
        return (short)PacketSessionData.m_trackLength$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_trackLength$set(MemorySegment seg, long index, short x) {
        PacketSessionData.m_trackLength$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionType"));
    public static VarHandle m_sessionType$VH() {
        return PacketSessionData.m_sessionType$VH;
    }
    public static byte m_sessionType$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_sessionType$VH.get(seg);
    }
    public static void m_sessionType$set( MemorySegment seg, byte x) {
        PacketSessionData.m_sessionType$VH.set(seg, x);
    }
    public static byte m_sessionType$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_sessionType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionType$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_sessionType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_trackId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_trackId"));
    public static VarHandle m_trackId$VH() {
        return PacketSessionData.m_trackId$VH;
    }
    public static byte m_trackId$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_trackId$VH.get(seg);
    }
    public static void m_trackId$set( MemorySegment seg, byte x) {
        PacketSessionData.m_trackId$VH.set(seg, x);
    }
    public static byte m_trackId$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_trackId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_trackId$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_trackId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_formula$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_formula"));
    public static VarHandle m_formula$VH() {
        return PacketSessionData.m_formula$VH;
    }
    public static byte m_formula$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_formula$VH.get(seg);
    }
    public static void m_formula$set( MemorySegment seg, byte x) {
        PacketSessionData.m_formula$VH.set(seg, x);
    }
    public static byte m_formula$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_formula$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_formula$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_formula$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionTimeLeft$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionTimeLeft"));
    public static VarHandle m_sessionTimeLeft$VH() {
        return PacketSessionData.m_sessionTimeLeft$VH;
    }
    public static short m_sessionTimeLeft$get(MemorySegment seg) {
        return (short)PacketSessionData.m_sessionTimeLeft$VH.get(seg);
    }
    public static void m_sessionTimeLeft$set( MemorySegment seg, short x) {
        PacketSessionData.m_sessionTimeLeft$VH.set(seg, x);
    }
    public static short m_sessionTimeLeft$get(MemorySegment seg, long index) {
        return (short)PacketSessionData.m_sessionTimeLeft$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionTimeLeft$set(MemorySegment seg, long index, short x) {
        PacketSessionData.m_sessionTimeLeft$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionDuration$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionDuration"));
    public static VarHandle m_sessionDuration$VH() {
        return PacketSessionData.m_sessionDuration$VH;
    }
    public static short m_sessionDuration$get(MemorySegment seg) {
        return (short)PacketSessionData.m_sessionDuration$VH.get(seg);
    }
    public static void m_sessionDuration$set( MemorySegment seg, short x) {
        PacketSessionData.m_sessionDuration$VH.set(seg, x);
    }
    public static short m_sessionDuration$get(MemorySegment seg, long index) {
        return (short)PacketSessionData.m_sessionDuration$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionDuration$set(MemorySegment seg, long index, short x) {
        PacketSessionData.m_sessionDuration$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitSpeedLimit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitSpeedLimit"));
    public static VarHandle m_pitSpeedLimit$VH() {
        return PacketSessionData.m_pitSpeedLimit$VH;
    }
    public static byte m_pitSpeedLimit$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitSpeedLimit$VH.get(seg);
    }
    public static void m_pitSpeedLimit$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitSpeedLimit$VH.set(seg, x);
    }
    public static byte m_pitSpeedLimit$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitSpeedLimit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitSpeedLimit$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitSpeedLimit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gamePaused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gamePaused"));
    public static VarHandle m_gamePaused$VH() {
        return PacketSessionData.m_gamePaused$VH;
    }
    public static byte m_gamePaused$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_gamePaused$VH.get(seg);
    }
    public static void m_gamePaused$set( MemorySegment seg, byte x) {
        PacketSessionData.m_gamePaused$VH.set(seg, x);
    }
    public static byte m_gamePaused$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_gamePaused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gamePaused$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_gamePaused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_isSpectating$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_isSpectating"));
    public static VarHandle m_isSpectating$VH() {
        return PacketSessionData.m_isSpectating$VH;
    }
    public static byte m_isSpectating$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_isSpectating$VH.get(seg);
    }
    public static void m_isSpectating$set( MemorySegment seg, byte x) {
        PacketSessionData.m_isSpectating$VH.set(seg, x);
    }
    public static byte m_isSpectating$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_isSpectating$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_isSpectating$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_isSpectating$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_spectatorCarIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_spectatorCarIndex"));
    public static VarHandle m_spectatorCarIndex$VH() {
        return PacketSessionData.m_spectatorCarIndex$VH;
    }
    public static byte m_spectatorCarIndex$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_spectatorCarIndex$VH.get(seg);
    }
    public static void m_spectatorCarIndex$set( MemorySegment seg, byte x) {
        PacketSessionData.m_spectatorCarIndex$VH.set(seg, x);
    }
    public static byte m_spectatorCarIndex$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_spectatorCarIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_spectatorCarIndex$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_spectatorCarIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sliProNativeSupport$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sliProNativeSupport"));
    public static VarHandle m_sliProNativeSupport$VH() {
        return PacketSessionData.m_sliProNativeSupport$VH;
    }
    public static byte m_sliProNativeSupport$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_sliProNativeSupport$VH.get(seg);
    }
    public static void m_sliProNativeSupport$set( MemorySegment seg, byte x) {
        PacketSessionData.m_sliProNativeSupport$VH.set(seg, x);
    }
    public static byte m_sliProNativeSupport$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_sliProNativeSupport$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sliProNativeSupport$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_sliProNativeSupport$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numMarshalZones$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numMarshalZones"));
    public static VarHandle m_numMarshalZones$VH() {
        return PacketSessionData.m_numMarshalZones$VH;
    }
    public static byte m_numMarshalZones$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_numMarshalZones$VH.get(seg);
    }
    public static void m_numMarshalZones$set( MemorySegment seg, byte x) {
        PacketSessionData.m_numMarshalZones$VH.set(seg, x);
    }
    public static byte m_numMarshalZones$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_numMarshalZones$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numMarshalZones$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_numMarshalZones$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_marshalZones$slice(MemorySegment seg) {
        return seg.asSlice(43, 105);
    }
    static final VarHandle m_safetyCarStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_safetyCarStatus"));
    public static VarHandle m_safetyCarStatus$VH() {
        return PacketSessionData.m_safetyCarStatus$VH;
    }
    public static byte m_safetyCarStatus$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_safetyCarStatus$VH.get(seg);
    }
    public static void m_safetyCarStatus$set( MemorySegment seg, byte x) {
        PacketSessionData.m_safetyCarStatus$VH.set(seg, x);
    }
    public static byte m_safetyCarStatus$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_safetyCarStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_safetyCarStatus$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_safetyCarStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_networkGame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_networkGame"));
    public static VarHandle m_networkGame$VH() {
        return PacketSessionData.m_networkGame$VH;
    }
    public static byte m_networkGame$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_networkGame$VH.get(seg);
    }
    public static void m_networkGame$set( MemorySegment seg, byte x) {
        PacketSessionData.m_networkGame$VH.set(seg, x);
    }
    public static byte m_networkGame$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_networkGame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_networkGame$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_networkGame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numWeatherForecastSamples$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numWeatherForecastSamples"));
    public static VarHandle m_numWeatherForecastSamples$VH() {
        return PacketSessionData.m_numWeatherForecastSamples$VH;
    }
    public static byte m_numWeatherForecastSamples$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_numWeatherForecastSamples$VH.get(seg);
    }
    public static void m_numWeatherForecastSamples$set( MemorySegment seg, byte x) {
        PacketSessionData.m_numWeatherForecastSamples$VH.set(seg, x);
    }
    public static byte m_numWeatherForecastSamples$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_numWeatherForecastSamples$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numWeatherForecastSamples$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_numWeatherForecastSamples$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_weatherForecastSamples$slice(MemorySegment seg) {
        return seg.asSlice(151, 448);
    }
    static final VarHandle m_forecastAccuracy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_forecastAccuracy"));
    public static VarHandle m_forecastAccuracy$VH() {
        return PacketSessionData.m_forecastAccuracy$VH;
    }
    public static byte m_forecastAccuracy$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_forecastAccuracy$VH.get(seg);
    }
    public static void m_forecastAccuracy$set( MemorySegment seg, byte x) {
        PacketSessionData.m_forecastAccuracy$VH.set(seg, x);
    }
    public static byte m_forecastAccuracy$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_forecastAccuracy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_forecastAccuracy$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_forecastAccuracy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_aiDifficulty$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_aiDifficulty"));
    public static VarHandle m_aiDifficulty$VH() {
        return PacketSessionData.m_aiDifficulty$VH;
    }
    public static byte m_aiDifficulty$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_aiDifficulty$VH.get(seg);
    }
    public static void m_aiDifficulty$set( MemorySegment seg, byte x) {
        PacketSessionData.m_aiDifficulty$VH.set(seg, x);
    }
    public static byte m_aiDifficulty$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_aiDifficulty$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_aiDifficulty$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_aiDifficulty$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_seasonLinkIdentifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_seasonLinkIdentifier"));
    public static VarHandle m_seasonLinkIdentifier$VH() {
        return PacketSessionData.m_seasonLinkIdentifier$VH;
    }
    public static int m_seasonLinkIdentifier$get(MemorySegment seg) {
        return (int)PacketSessionData.m_seasonLinkIdentifier$VH.get(seg);
    }
    public static void m_seasonLinkIdentifier$set( MemorySegment seg, int x) {
        PacketSessionData.m_seasonLinkIdentifier$VH.set(seg, x);
    }
    public static int m_seasonLinkIdentifier$get(MemorySegment seg, long index) {
        return (int)PacketSessionData.m_seasonLinkIdentifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_seasonLinkIdentifier$set(MemorySegment seg, long index, int x) {
        PacketSessionData.m_seasonLinkIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_weekendLinkIdentifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_weekendLinkIdentifier"));
    public static VarHandle m_weekendLinkIdentifier$VH() {
        return PacketSessionData.m_weekendLinkIdentifier$VH;
    }
    public static int m_weekendLinkIdentifier$get(MemorySegment seg) {
        return (int)PacketSessionData.m_weekendLinkIdentifier$VH.get(seg);
    }
    public static void m_weekendLinkIdentifier$set( MemorySegment seg, int x) {
        PacketSessionData.m_weekendLinkIdentifier$VH.set(seg, x);
    }
    public static int m_weekendLinkIdentifier$get(MemorySegment seg, long index) {
        return (int)PacketSessionData.m_weekendLinkIdentifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_weekendLinkIdentifier$set(MemorySegment seg, long index, int x) {
        PacketSessionData.m_weekendLinkIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionLinkIdentifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionLinkIdentifier"));
    public static VarHandle m_sessionLinkIdentifier$VH() {
        return PacketSessionData.m_sessionLinkIdentifier$VH;
    }
    public static int m_sessionLinkIdentifier$get(MemorySegment seg) {
        return (int)PacketSessionData.m_sessionLinkIdentifier$VH.get(seg);
    }
    public static void m_sessionLinkIdentifier$set( MemorySegment seg, int x) {
        PacketSessionData.m_sessionLinkIdentifier$VH.set(seg, x);
    }
    public static int m_sessionLinkIdentifier$get(MemorySegment seg, long index) {
        return (int)PacketSessionData.m_sessionLinkIdentifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionLinkIdentifier$set(MemorySegment seg, long index, int x) {
        PacketSessionData.m_sessionLinkIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStopWindowIdealLap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStopWindowIdealLap"));
    public static VarHandle m_pitStopWindowIdealLap$VH() {
        return PacketSessionData.m_pitStopWindowIdealLap$VH;
    }
    public static byte m_pitStopWindowIdealLap$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitStopWindowIdealLap$VH.get(seg);
    }
    public static void m_pitStopWindowIdealLap$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitStopWindowIdealLap$VH.set(seg, x);
    }
    public static byte m_pitStopWindowIdealLap$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitStopWindowIdealLap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStopWindowIdealLap$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitStopWindowIdealLap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStopWindowLatestLap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStopWindowLatestLap"));
    public static VarHandle m_pitStopWindowLatestLap$VH() {
        return PacketSessionData.m_pitStopWindowLatestLap$VH;
    }
    public static byte m_pitStopWindowLatestLap$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitStopWindowLatestLap$VH.get(seg);
    }
    public static void m_pitStopWindowLatestLap$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitStopWindowLatestLap$VH.set(seg, x);
    }
    public static byte m_pitStopWindowLatestLap$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitStopWindowLatestLap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStopWindowLatestLap$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitStopWindowLatestLap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStopRejoinPosition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStopRejoinPosition"));
    public static VarHandle m_pitStopRejoinPosition$VH() {
        return PacketSessionData.m_pitStopRejoinPosition$VH;
    }
    public static byte m_pitStopRejoinPosition$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitStopRejoinPosition$VH.get(seg);
    }
    public static void m_pitStopRejoinPosition$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitStopRejoinPosition$VH.set(seg, x);
    }
    public static byte m_pitStopRejoinPosition$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitStopRejoinPosition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStopRejoinPosition$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitStopRejoinPosition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_steeringAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_steeringAssist"));
    public static VarHandle m_steeringAssist$VH() {
        return PacketSessionData.m_steeringAssist$VH;
    }
    public static byte m_steeringAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_steeringAssist$VH.get(seg);
    }
    public static void m_steeringAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_steeringAssist$VH.set(seg, x);
    }
    public static byte m_steeringAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_steeringAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_steeringAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_steeringAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_brakingAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_brakingAssist"));
    public static VarHandle m_brakingAssist$VH() {
        return PacketSessionData.m_brakingAssist$VH;
    }
    public static byte m_brakingAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_brakingAssist$VH.get(seg);
    }
    public static void m_brakingAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_brakingAssist$VH.set(seg, x);
    }
    public static byte m_brakingAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_brakingAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_brakingAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_brakingAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gearboxAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gearboxAssist"));
    public static VarHandle m_gearboxAssist$VH() {
        return PacketSessionData.m_gearboxAssist$VH;
    }
    public static byte m_gearboxAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_gearboxAssist$VH.get(seg);
    }
    public static void m_gearboxAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_gearboxAssist$VH.set(seg, x);
    }
    public static byte m_gearboxAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_gearboxAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gearboxAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_gearboxAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitAssist"));
    public static VarHandle m_pitAssist$VH() {
        return PacketSessionData.m_pitAssist$VH;
    }
    public static byte m_pitAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitAssist$VH.get(seg);
    }
    public static void m_pitAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitAssist$VH.set(seg, x);
    }
    public static byte m_pitAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitReleaseAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitReleaseAssist"));
    public static VarHandle m_pitReleaseAssist$VH() {
        return PacketSessionData.m_pitReleaseAssist$VH;
    }
    public static byte m_pitReleaseAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_pitReleaseAssist$VH.get(seg);
    }
    public static void m_pitReleaseAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_pitReleaseAssist$VH.set(seg, x);
    }
    public static byte m_pitReleaseAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_pitReleaseAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitReleaseAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_pitReleaseAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ERSAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ERSAssist"));
    public static VarHandle m_ERSAssist$VH() {
        return PacketSessionData.m_ERSAssist$VH;
    }
    public static byte m_ERSAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_ERSAssist$VH.get(seg);
    }
    public static void m_ERSAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_ERSAssist$VH.set(seg, x);
    }
    public static byte m_ERSAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_ERSAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ERSAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_ERSAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_DRSAssist$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_DRSAssist"));
    public static VarHandle m_DRSAssist$VH() {
        return PacketSessionData.m_DRSAssist$VH;
    }
    public static byte m_DRSAssist$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_DRSAssist$VH.get(seg);
    }
    public static void m_DRSAssist$set( MemorySegment seg, byte x) {
        PacketSessionData.m_DRSAssist$VH.set(seg, x);
    }
    public static byte m_DRSAssist$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_DRSAssist$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_DRSAssist$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_DRSAssist$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_dynamicRacingLine$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_dynamicRacingLine"));
    public static VarHandle m_dynamicRacingLine$VH() {
        return PacketSessionData.m_dynamicRacingLine$VH;
    }
    public static byte m_dynamicRacingLine$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_dynamicRacingLine$VH.get(seg);
    }
    public static void m_dynamicRacingLine$set( MemorySegment seg, byte x) {
        PacketSessionData.m_dynamicRacingLine$VH.set(seg, x);
    }
    public static byte m_dynamicRacingLine$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_dynamicRacingLine$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_dynamicRacingLine$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_dynamicRacingLine$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_dynamicRacingLineType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_dynamicRacingLineType"));
    public static VarHandle m_dynamicRacingLineType$VH() {
        return PacketSessionData.m_dynamicRacingLineType$VH;
    }
    public static byte m_dynamicRacingLineType$get(MemorySegment seg) {
        return (byte)PacketSessionData.m_dynamicRacingLineType$VH.get(seg);
    }
    public static void m_dynamicRacingLineType$set( MemorySegment seg, byte x) {
        PacketSessionData.m_dynamicRacingLineType$VH.set(seg, x);
    }
    public static byte m_dynamicRacingLineType$get(MemorySegment seg, long index) {
        return (byte)PacketSessionData.m_dynamicRacingLineType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_dynamicRacingLineType$set(MemorySegment seg, long index, byte x) {
        PacketSessionData.m_dynamicRacingLineType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


