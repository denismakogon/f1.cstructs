// Generated by jextract

package f1.cstructs.year2021;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketHeader {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
        Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
        Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
        Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
        Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
    ).withName("PacketHeader");
    public static MemoryLayout $LAYOUT() {
        return PacketHeader.$struct$LAYOUT;
    }
    static final VarHandle m_packetFormat$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_packetFormat"));
    public static VarHandle m_packetFormat$VH() {
        return PacketHeader.m_packetFormat$VH;
    }
    public static short m_packetFormat$get(MemorySegment seg) {
        return (short)PacketHeader.m_packetFormat$VH.get(seg);
    }
    public static void m_packetFormat$set( MemorySegment seg, short x) {
        PacketHeader.m_packetFormat$VH.set(seg, x);
    }
    public static short m_packetFormat$get(MemorySegment seg, long index) {
        return (short)PacketHeader.m_packetFormat$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_packetFormat$set(MemorySegment seg, long index, short x) {
        PacketHeader.m_packetFormat$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gameMajorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gameMajorVersion"));
    public static VarHandle m_gameMajorVersion$VH() {
        return PacketHeader.m_gameMajorVersion$VH;
    }
    public static byte m_gameMajorVersion$get(MemorySegment seg) {
        return (byte)PacketHeader.m_gameMajorVersion$VH.get(seg);
    }
    public static void m_gameMajorVersion$set( MemorySegment seg, byte x) {
        PacketHeader.m_gameMajorVersion$VH.set(seg, x);
    }
    public static byte m_gameMajorVersion$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_gameMajorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gameMajorVersion$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_gameMajorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gameMinorVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gameMinorVersion"));
    public static VarHandle m_gameMinorVersion$VH() {
        return PacketHeader.m_gameMinorVersion$VH;
    }
    public static byte m_gameMinorVersion$get(MemorySegment seg) {
        return (byte)PacketHeader.m_gameMinorVersion$VH.get(seg);
    }
    public static void m_gameMinorVersion$set( MemorySegment seg, byte x) {
        PacketHeader.m_gameMinorVersion$VH.set(seg, x);
    }
    public static byte m_gameMinorVersion$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_gameMinorVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gameMinorVersion$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_gameMinorVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_packetVersion$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_packetVersion"));
    public static VarHandle m_packetVersion$VH() {
        return PacketHeader.m_packetVersion$VH;
    }
    public static byte m_packetVersion$get(MemorySegment seg) {
        return (byte)PacketHeader.m_packetVersion$VH.get(seg);
    }
    public static void m_packetVersion$set( MemorySegment seg, byte x) {
        PacketHeader.m_packetVersion$VH.set(seg, x);
    }
    public static byte m_packetVersion$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_packetVersion$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_packetVersion$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_packetVersion$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_packetId$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_packetId"));
    public static VarHandle m_packetId$VH() {
        return PacketHeader.m_packetId$VH;
    }
    public static byte m_packetId$get(MemorySegment seg) {
        return (byte)PacketHeader.m_packetId$VH.get(seg);
    }
    public static void m_packetId$set( MemorySegment seg, byte x) {
        PacketHeader.m_packetId$VH.set(seg, x);
    }
    public static byte m_packetId$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_packetId$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_packetId$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_packetId$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionUID$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionUID"));
    public static VarHandle m_sessionUID$VH() {
        return PacketHeader.m_sessionUID$VH;
    }
    public static long m_sessionUID$get(MemorySegment seg) {
        return (long)PacketHeader.m_sessionUID$VH.get(seg);
    }
    public static void m_sessionUID$set( MemorySegment seg, long x) {
        PacketHeader.m_sessionUID$VH.set(seg, x);
    }
    public static long m_sessionUID$get(MemorySegment seg, long index) {
        return (long)PacketHeader.m_sessionUID$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionUID$set(MemorySegment seg, long index, long x) {
        PacketHeader.m_sessionUID$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sessionTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionTime"));
    public static VarHandle m_sessionTime$VH() {
        return PacketHeader.m_sessionTime$VH;
    }
    public static float m_sessionTime$get(MemorySegment seg) {
        return (float)PacketHeader.m_sessionTime$VH.get(seg);
    }
    public static void m_sessionTime$set( MemorySegment seg, float x) {
        PacketHeader.m_sessionTime$VH.set(seg, x);
    }
    public static float m_sessionTime$get(MemorySegment seg, long index) {
        return (float)PacketHeader.m_sessionTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionTime$set(MemorySegment seg, long index, float x) {
        PacketHeader.m_sessionTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_frameIdentifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_frameIdentifier"));
    public static VarHandle m_frameIdentifier$VH() {
        return PacketHeader.m_frameIdentifier$VH;
    }
    public static int m_frameIdentifier$get(MemorySegment seg) {
        return (int)PacketHeader.m_frameIdentifier$VH.get(seg);
    }
    public static void m_frameIdentifier$set( MemorySegment seg, int x) {
        PacketHeader.m_frameIdentifier$VH.set(seg, x);
    }
    public static int m_frameIdentifier$get(MemorySegment seg, long index) {
        return (int)PacketHeader.m_frameIdentifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_frameIdentifier$set(MemorySegment seg, long index, int x) {
        PacketHeader.m_frameIdentifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_playerCarIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_playerCarIndex"));
    public static VarHandle m_playerCarIndex$VH() {
        return PacketHeader.m_playerCarIndex$VH;
    }
    public static byte m_playerCarIndex$get(MemorySegment seg) {
        return (byte)PacketHeader.m_playerCarIndex$VH.get(seg);
    }
    public static void m_playerCarIndex$set( MemorySegment seg, byte x) {
        PacketHeader.m_playerCarIndex$VH.set(seg, x);
    }
    public static byte m_playerCarIndex$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_playerCarIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_playerCarIndex$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_playerCarIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_secondaryPlayerCarIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_secondaryPlayerCarIndex"));
    public static VarHandle m_secondaryPlayerCarIndex$VH() {
        return PacketHeader.m_secondaryPlayerCarIndex$VH;
    }
    public static byte m_secondaryPlayerCarIndex$get(MemorySegment seg) {
        return (byte)PacketHeader.m_secondaryPlayerCarIndex$VH.get(seg);
    }
    public static void m_secondaryPlayerCarIndex$set( MemorySegment seg, byte x) {
        PacketHeader.m_secondaryPlayerCarIndex$VH.set(seg, x);
    }
    public static byte m_secondaryPlayerCarIndex$get(MemorySegment seg, long index) {
        return (byte)PacketHeader.m_secondaryPlayerCarIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_secondaryPlayerCarIndex$set(MemorySegment seg, long index, byte x) {
        PacketHeader.m_secondaryPlayerCarIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


