// Generated by jextract

package f1.cstructs.year2021;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketSessionHistoryData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        Constants$root.C_CHAR$LAYOUT.withName("m_carIdx"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numLaps"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numTyreStints"),
        Constants$root.C_CHAR$LAYOUT.withName("m_bestLapTimeLapNum"),
        Constants$root.C_CHAR$LAYOUT.withName("m_bestSector1LapNum"),
        Constants$root.C_CHAR$LAYOUT.withName("m_bestSector2LapNum"),
        Constants$root.C_CHAR$LAYOUT.withName("m_bestSector3LapNum"),
        MemoryLayout.sequenceLayout(100, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("m_lapTimeInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_sector1TimeInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_sector2TimeInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_sector3TimeInMS"),
            Constants$root.C_CHAR$LAYOUT.withName("m_lapValidBitFlags")
        ).withName("LapHistoryData")).withName("m_lapHistoryData"),
        MemoryLayout.sequenceLayout(8, MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("m_endLap"),
            Constants$root.C_CHAR$LAYOUT.withName("m_tyreActualCompound"),
            Constants$root.C_CHAR$LAYOUT.withName("m_tyreVisualCompound")
        ).withName("TyreStintHistoryData")).withName("m_tyreStintsHistoryData")
    ).withName("PacketSessionHistoryData");
    public static MemoryLayout $LAYOUT() {
        return PacketSessionHistoryData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle m_carIdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_carIdx"));
    public static VarHandle m_carIdx$VH() {
        return PacketSessionHistoryData.m_carIdx$VH;
    }
    public static byte m_carIdx$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_carIdx$VH.get(seg);
    }
    public static void m_carIdx$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_carIdx$VH.set(seg, x);
    }
    public static byte m_carIdx$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_carIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_carIdx$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_carIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numLaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numLaps"));
    public static VarHandle m_numLaps$VH() {
        return PacketSessionHistoryData.m_numLaps$VH;
    }
    public static byte m_numLaps$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_numLaps$VH.get(seg);
    }
    public static void m_numLaps$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_numLaps$VH.set(seg, x);
    }
    public static byte m_numLaps$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_numLaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numLaps$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_numLaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numTyreStints$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numTyreStints"));
    public static VarHandle m_numTyreStints$VH() {
        return PacketSessionHistoryData.m_numTyreStints$VH;
    }
    public static byte m_numTyreStints$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_numTyreStints$VH.get(seg);
    }
    public static void m_numTyreStints$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_numTyreStints$VH.set(seg, x);
    }
    public static byte m_numTyreStints$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_numTyreStints$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numTyreStints$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_numTyreStints$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_bestLapTimeLapNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bestLapTimeLapNum"));
    public static VarHandle m_bestLapTimeLapNum$VH() {
        return PacketSessionHistoryData.m_bestLapTimeLapNum$VH;
    }
    public static byte m_bestLapTimeLapNum$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_bestLapTimeLapNum$VH.get(seg);
    }
    public static void m_bestLapTimeLapNum$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_bestLapTimeLapNum$VH.set(seg, x);
    }
    public static byte m_bestLapTimeLapNum$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_bestLapTimeLapNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bestLapTimeLapNum$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_bestLapTimeLapNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_bestSector1LapNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bestSector1LapNum"));
    public static VarHandle m_bestSector1LapNum$VH() {
        return PacketSessionHistoryData.m_bestSector1LapNum$VH;
    }
    public static byte m_bestSector1LapNum$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_bestSector1LapNum$VH.get(seg);
    }
    public static void m_bestSector1LapNum$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_bestSector1LapNum$VH.set(seg, x);
    }
    public static byte m_bestSector1LapNum$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_bestSector1LapNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bestSector1LapNum$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_bestSector1LapNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_bestSector2LapNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bestSector2LapNum"));
    public static VarHandle m_bestSector2LapNum$VH() {
        return PacketSessionHistoryData.m_bestSector2LapNum$VH;
    }
    public static byte m_bestSector2LapNum$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_bestSector2LapNum$VH.get(seg);
    }
    public static void m_bestSector2LapNum$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_bestSector2LapNum$VH.set(seg, x);
    }
    public static byte m_bestSector2LapNum$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_bestSector2LapNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bestSector2LapNum$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_bestSector2LapNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_bestSector3LapNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_bestSector3LapNum"));
    public static VarHandle m_bestSector3LapNum$VH() {
        return PacketSessionHistoryData.m_bestSector3LapNum$VH;
    }
    public static byte m_bestSector3LapNum$get(MemorySegment seg) {
        return (byte)PacketSessionHistoryData.m_bestSector3LapNum$VH.get(seg);
    }
    public static void m_bestSector3LapNum$set( MemorySegment seg, byte x) {
        PacketSessionHistoryData.m_bestSector3LapNum$VH.set(seg, x);
    }
    public static byte m_bestSector3LapNum$get(MemorySegment seg, long index) {
        return (byte)PacketSessionHistoryData.m_bestSector3LapNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_bestSector3LapNum$set(MemorySegment seg, long index, byte x) {
        PacketSessionHistoryData.m_bestSector3LapNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment m_lapHistoryData$slice(MemorySegment seg) {
        return seg.asSlice(31, 1100);
    }
    public static MemorySegment m_tyreStintsHistoryData$slice(MemorySegment seg) {
        return seg.asSlice(1131, 24);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


