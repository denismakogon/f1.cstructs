// Generated by jextract

package f1.cstructs.year2021;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class FastestLap {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
        Constants$root.C_FLOAT$LAYOUT.withName("lapTime")
    ).withName("FastestLap");
    public static MemoryLayout $LAYOUT() {
        return FastestLap.$struct$LAYOUT;
    }
    static final VarHandle vehicleIdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vehicleIdx"));
    public static VarHandle vehicleIdx$VH() {
        return FastestLap.vehicleIdx$VH;
    }
    public static byte vehicleIdx$get(MemorySegment seg) {
        return (byte)FastestLap.vehicleIdx$VH.get(seg);
    }
    public static void vehicleIdx$set( MemorySegment seg, byte x) {
        FastestLap.vehicleIdx$VH.set(seg, x);
    }
    public static byte vehicleIdx$get(MemorySegment seg, long index) {
        return (byte)FastestLap.vehicleIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vehicleIdx$set(MemorySegment seg, long index, byte x) {
        FastestLap.vehicleIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle lapTime$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lapTime"));
    public static VarHandle lapTime$VH() {
        return FastestLap.lapTime$VH;
    }
    public static float lapTime$get(MemorySegment seg) {
        return (float)FastestLap.lapTime$VH.get(seg);
    }
    public static void lapTime$set( MemorySegment seg, float x) {
        FastestLap.lapTime$VH.set(seg, x);
    }
    public static float lapTime$get(MemorySegment seg, long index) {
        return (float)FastestLap.lapTime$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lapTime$set(MemorySegment seg, long index, float x) {
        FastestLap.lapTime$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


