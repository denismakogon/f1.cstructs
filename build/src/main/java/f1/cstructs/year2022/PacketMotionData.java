// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketMotionData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        MemoryLayout.sequenceLayout(22, MemoryLayout.structLayout(
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldPositionX"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldPositionY"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldPositionZ"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldVelocityX"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldVelocityY"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_worldVelocityZ"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldForwardDirX"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldForwardDirY"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldForwardDirZ"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldRightDirX"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldRightDirY"),
            Constants$root.C_SHORT$LAYOUT.withName("m_worldRightDirZ"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_gForceLateral"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_gForceLongitudinal"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_gForceVertical"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_yaw"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_pitch"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_roll")
        ).withName("CarMotionData")).withName("m_carMotionData"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_suspensionPosition"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_suspensionVelocity"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_suspensionAcceleration"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_wheelSpeed"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_wheelSlip"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_localVelocityX"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_localVelocityY"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_localVelocityZ"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularVelocityX"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularVelocityY"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularVelocityZ"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularAccelerationX"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularAccelerationY"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_angularAccelerationZ"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_frontWheelsAngle")
    ).withName("PacketMotionData");
    public static MemoryLayout $LAYOUT() {
        return PacketMotionData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment m_carMotionData$slice(MemorySegment seg) {
        return seg.asSlice(24, 1320);
    }
    public static MemorySegment m_suspensionPosition$slice(MemorySegment seg) {
        return seg.asSlice(1344, 16);
    }
    public static MemorySegment m_suspensionVelocity$slice(MemorySegment seg) {
        return seg.asSlice(1360, 16);
    }
    public static MemorySegment m_suspensionAcceleration$slice(MemorySegment seg) {
        return seg.asSlice(1376, 16);
    }
    public static MemorySegment m_wheelSpeed$slice(MemorySegment seg) {
        return seg.asSlice(1392, 16);
    }
    public static MemorySegment m_wheelSlip$slice(MemorySegment seg) {
        return seg.asSlice(1408, 16);
    }
    static final VarHandle m_localVelocityX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_localVelocityX"));
    public static VarHandle m_localVelocityX$VH() {
        return PacketMotionData.m_localVelocityX$VH;
    }
    public static float m_localVelocityX$get(MemorySegment seg) {
        return (float)PacketMotionData.m_localVelocityX$VH.get(seg);
    }
    public static void m_localVelocityX$set( MemorySegment seg, float x) {
        PacketMotionData.m_localVelocityX$VH.set(seg, x);
    }
    public static float m_localVelocityX$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_localVelocityX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_localVelocityX$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_localVelocityX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_localVelocityY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_localVelocityY"));
    public static VarHandle m_localVelocityY$VH() {
        return PacketMotionData.m_localVelocityY$VH;
    }
    public static float m_localVelocityY$get(MemorySegment seg) {
        return (float)PacketMotionData.m_localVelocityY$VH.get(seg);
    }
    public static void m_localVelocityY$set( MemorySegment seg, float x) {
        PacketMotionData.m_localVelocityY$VH.set(seg, x);
    }
    public static float m_localVelocityY$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_localVelocityY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_localVelocityY$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_localVelocityY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_localVelocityZ$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_localVelocityZ"));
    public static VarHandle m_localVelocityZ$VH() {
        return PacketMotionData.m_localVelocityZ$VH;
    }
    public static float m_localVelocityZ$get(MemorySegment seg) {
        return (float)PacketMotionData.m_localVelocityZ$VH.get(seg);
    }
    public static void m_localVelocityZ$set( MemorySegment seg, float x) {
        PacketMotionData.m_localVelocityZ$VH.set(seg, x);
    }
    public static float m_localVelocityZ$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_localVelocityZ$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_localVelocityZ$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_localVelocityZ$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularVelocityX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularVelocityX"));
    public static VarHandle m_angularVelocityX$VH() {
        return PacketMotionData.m_angularVelocityX$VH;
    }
    public static float m_angularVelocityX$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularVelocityX$VH.get(seg);
    }
    public static void m_angularVelocityX$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularVelocityX$VH.set(seg, x);
    }
    public static float m_angularVelocityX$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularVelocityX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularVelocityX$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularVelocityX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularVelocityY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularVelocityY"));
    public static VarHandle m_angularVelocityY$VH() {
        return PacketMotionData.m_angularVelocityY$VH;
    }
    public static float m_angularVelocityY$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularVelocityY$VH.get(seg);
    }
    public static void m_angularVelocityY$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularVelocityY$VH.set(seg, x);
    }
    public static float m_angularVelocityY$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularVelocityY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularVelocityY$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularVelocityY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularVelocityZ$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularVelocityZ"));
    public static VarHandle m_angularVelocityZ$VH() {
        return PacketMotionData.m_angularVelocityZ$VH;
    }
    public static float m_angularVelocityZ$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularVelocityZ$VH.get(seg);
    }
    public static void m_angularVelocityZ$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularVelocityZ$VH.set(seg, x);
    }
    public static float m_angularVelocityZ$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularVelocityZ$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularVelocityZ$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularVelocityZ$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularAccelerationX$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularAccelerationX"));
    public static VarHandle m_angularAccelerationX$VH() {
        return PacketMotionData.m_angularAccelerationX$VH;
    }
    public static float m_angularAccelerationX$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularAccelerationX$VH.get(seg);
    }
    public static void m_angularAccelerationX$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularAccelerationX$VH.set(seg, x);
    }
    public static float m_angularAccelerationX$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularAccelerationX$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularAccelerationX$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularAccelerationX$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularAccelerationY$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularAccelerationY"));
    public static VarHandle m_angularAccelerationY$VH() {
        return PacketMotionData.m_angularAccelerationY$VH;
    }
    public static float m_angularAccelerationY$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularAccelerationY$VH.get(seg);
    }
    public static void m_angularAccelerationY$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularAccelerationY$VH.set(seg, x);
    }
    public static float m_angularAccelerationY$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularAccelerationY$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularAccelerationY$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularAccelerationY$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_angularAccelerationZ$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_angularAccelerationZ"));
    public static VarHandle m_angularAccelerationZ$VH() {
        return PacketMotionData.m_angularAccelerationZ$VH;
    }
    public static float m_angularAccelerationZ$get(MemorySegment seg) {
        return (float)PacketMotionData.m_angularAccelerationZ$VH.get(seg);
    }
    public static void m_angularAccelerationZ$set( MemorySegment seg, float x) {
        PacketMotionData.m_angularAccelerationZ$VH.set(seg, x);
    }
    public static float m_angularAccelerationZ$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_angularAccelerationZ$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_angularAccelerationZ$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_angularAccelerationZ$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_frontWheelsAngle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_frontWheelsAngle"));
    public static VarHandle m_frontWheelsAngle$VH() {
        return PacketMotionData.m_frontWheelsAngle$VH;
    }
    public static float m_frontWheelsAngle$get(MemorySegment seg) {
        return (float)PacketMotionData.m_frontWheelsAngle$VH.get(seg);
    }
    public static void m_frontWheelsAngle$set( MemorySegment seg, float x) {
        PacketMotionData.m_frontWheelsAngle$VH.set(seg, x);
    }
    public static float m_frontWheelsAngle$get(MemorySegment seg, long index) {
        return (float)PacketMotionData.m_frontWheelsAngle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_frontWheelsAngle$set(MemorySegment seg, long index, float x) {
        PacketMotionData.m_frontWheelsAngle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


