// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class LapData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("m_lastLapTimeInMS"),
        Constants$root.C_INT$LAYOUT.withName("m_currentLapTimeInMS"),
        Constants$root.C_SHORT$LAYOUT.withName("m_sector1TimeInMS"),
        Constants$root.C_SHORT$LAYOUT.withName("m_sector2TimeInMS"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_lapDistance"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_totalDistance"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_safetyCarDelta"),
        Constants$root.C_CHAR$LAYOUT.withName("m_carPosition"),
        Constants$root.C_CHAR$LAYOUT.withName("m_currentLapNum"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitStatus"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numPitStops"),
        Constants$root.C_CHAR$LAYOUT.withName("m_sector"),
        Constants$root.C_CHAR$LAYOUT.withName("m_currentLapInvalid"),
        Constants$root.C_CHAR$LAYOUT.withName("m_penalties"),
        Constants$root.C_CHAR$LAYOUT.withName("m_warnings"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numUnservedDriveThroughPens"),
        Constants$root.C_CHAR$LAYOUT.withName("m_numUnservedStopGoPens"),
        Constants$root.C_CHAR$LAYOUT.withName("m_gridPosition"),
        Constants$root.C_CHAR$LAYOUT.withName("m_driverStatus"),
        Constants$root.C_CHAR$LAYOUT.withName("m_resultStatus"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitLaneTimerActive"),
        Constants$root.C_SHORT$LAYOUT.withName("m_pitLaneTimeInLaneInMS"),
        Constants$root.C_SHORT$LAYOUT.withName("m_pitStopTimerInMS"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitStopShouldServePen")
    ).withName("LapData");
    public static MemoryLayout $LAYOUT() {
        return LapData.$struct$LAYOUT;
    }
    static final VarHandle m_lastLapTimeInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_lastLapTimeInMS"));
    public static VarHandle m_lastLapTimeInMS$VH() {
        return LapData.m_lastLapTimeInMS$VH;
    }
    public static int m_lastLapTimeInMS$get(MemorySegment seg) {
        return (int)LapData.m_lastLapTimeInMS$VH.get(seg);
    }
    public static void m_lastLapTimeInMS$set( MemorySegment seg, int x) {
        LapData.m_lastLapTimeInMS$VH.set(seg, x);
    }
    public static int m_lastLapTimeInMS$get(MemorySegment seg, long index) {
        return (int)LapData.m_lastLapTimeInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_lastLapTimeInMS$set(MemorySegment seg, long index, int x) {
        LapData.m_lastLapTimeInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_currentLapTimeInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_currentLapTimeInMS"));
    public static VarHandle m_currentLapTimeInMS$VH() {
        return LapData.m_currentLapTimeInMS$VH;
    }
    public static int m_currentLapTimeInMS$get(MemorySegment seg) {
        return (int)LapData.m_currentLapTimeInMS$VH.get(seg);
    }
    public static void m_currentLapTimeInMS$set( MemorySegment seg, int x) {
        LapData.m_currentLapTimeInMS$VH.set(seg, x);
    }
    public static int m_currentLapTimeInMS$get(MemorySegment seg, long index) {
        return (int)LapData.m_currentLapTimeInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_currentLapTimeInMS$set(MemorySegment seg, long index, int x) {
        LapData.m_currentLapTimeInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sector1TimeInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sector1TimeInMS"));
    public static VarHandle m_sector1TimeInMS$VH() {
        return LapData.m_sector1TimeInMS$VH;
    }
    public static short m_sector1TimeInMS$get(MemorySegment seg) {
        return (short)LapData.m_sector1TimeInMS$VH.get(seg);
    }
    public static void m_sector1TimeInMS$set( MemorySegment seg, short x) {
        LapData.m_sector1TimeInMS$VH.set(seg, x);
    }
    public static short m_sector1TimeInMS$get(MemorySegment seg, long index) {
        return (short)LapData.m_sector1TimeInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sector1TimeInMS$set(MemorySegment seg, long index, short x) {
        LapData.m_sector1TimeInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sector2TimeInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sector2TimeInMS"));
    public static VarHandle m_sector2TimeInMS$VH() {
        return LapData.m_sector2TimeInMS$VH;
    }
    public static short m_sector2TimeInMS$get(MemorySegment seg) {
        return (short)LapData.m_sector2TimeInMS$VH.get(seg);
    }
    public static void m_sector2TimeInMS$set( MemorySegment seg, short x) {
        LapData.m_sector2TimeInMS$VH.set(seg, x);
    }
    public static short m_sector2TimeInMS$get(MemorySegment seg, long index) {
        return (short)LapData.m_sector2TimeInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sector2TimeInMS$set(MemorySegment seg, long index, short x) {
        LapData.m_sector2TimeInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_lapDistance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_lapDistance"));
    public static VarHandle m_lapDistance$VH() {
        return LapData.m_lapDistance$VH;
    }
    public static float m_lapDistance$get(MemorySegment seg) {
        return (float)LapData.m_lapDistance$VH.get(seg);
    }
    public static void m_lapDistance$set( MemorySegment seg, float x) {
        LapData.m_lapDistance$VH.set(seg, x);
    }
    public static float m_lapDistance$get(MemorySegment seg, long index) {
        return (float)LapData.m_lapDistance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_lapDistance$set(MemorySegment seg, long index, float x) {
        LapData.m_lapDistance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_totalDistance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_totalDistance"));
    public static VarHandle m_totalDistance$VH() {
        return LapData.m_totalDistance$VH;
    }
    public static float m_totalDistance$get(MemorySegment seg) {
        return (float)LapData.m_totalDistance$VH.get(seg);
    }
    public static void m_totalDistance$set( MemorySegment seg, float x) {
        LapData.m_totalDistance$VH.set(seg, x);
    }
    public static float m_totalDistance$get(MemorySegment seg, long index) {
        return (float)LapData.m_totalDistance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_totalDistance$set(MemorySegment seg, long index, float x) {
        LapData.m_totalDistance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_safetyCarDelta$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_safetyCarDelta"));
    public static VarHandle m_safetyCarDelta$VH() {
        return LapData.m_safetyCarDelta$VH;
    }
    public static float m_safetyCarDelta$get(MemorySegment seg) {
        return (float)LapData.m_safetyCarDelta$VH.get(seg);
    }
    public static void m_safetyCarDelta$set( MemorySegment seg, float x) {
        LapData.m_safetyCarDelta$VH.set(seg, x);
    }
    public static float m_safetyCarDelta$get(MemorySegment seg, long index) {
        return (float)LapData.m_safetyCarDelta$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_safetyCarDelta$set(MemorySegment seg, long index, float x) {
        LapData.m_safetyCarDelta$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_carPosition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_carPosition"));
    public static VarHandle m_carPosition$VH() {
        return LapData.m_carPosition$VH;
    }
    public static byte m_carPosition$get(MemorySegment seg) {
        return (byte)LapData.m_carPosition$VH.get(seg);
    }
    public static void m_carPosition$set( MemorySegment seg, byte x) {
        LapData.m_carPosition$VH.set(seg, x);
    }
    public static byte m_carPosition$get(MemorySegment seg, long index) {
        return (byte)LapData.m_carPosition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_carPosition$set(MemorySegment seg, long index, byte x) {
        LapData.m_carPosition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_currentLapNum$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_currentLapNum"));
    public static VarHandle m_currentLapNum$VH() {
        return LapData.m_currentLapNum$VH;
    }
    public static byte m_currentLapNum$get(MemorySegment seg) {
        return (byte)LapData.m_currentLapNum$VH.get(seg);
    }
    public static void m_currentLapNum$set( MemorySegment seg, byte x) {
        LapData.m_currentLapNum$VH.set(seg, x);
    }
    public static byte m_currentLapNum$get(MemorySegment seg, long index) {
        return (byte)LapData.m_currentLapNum$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_currentLapNum$set(MemorySegment seg, long index, byte x) {
        LapData.m_currentLapNum$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStatus"));
    public static VarHandle m_pitStatus$VH() {
        return LapData.m_pitStatus$VH;
    }
    public static byte m_pitStatus$get(MemorySegment seg) {
        return (byte)LapData.m_pitStatus$VH.get(seg);
    }
    public static void m_pitStatus$set( MemorySegment seg, byte x) {
        LapData.m_pitStatus$VH.set(seg, x);
    }
    public static byte m_pitStatus$get(MemorySegment seg, long index) {
        return (byte)LapData.m_pitStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStatus$set(MemorySegment seg, long index, byte x) {
        LapData.m_pitStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numPitStops$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numPitStops"));
    public static VarHandle m_numPitStops$VH() {
        return LapData.m_numPitStops$VH;
    }
    public static byte m_numPitStops$get(MemorySegment seg) {
        return (byte)LapData.m_numPitStops$VH.get(seg);
    }
    public static void m_numPitStops$set( MemorySegment seg, byte x) {
        LapData.m_numPitStops$VH.set(seg, x);
    }
    public static byte m_numPitStops$get(MemorySegment seg, long index) {
        return (byte)LapData.m_numPitStops$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numPitStops$set(MemorySegment seg, long index, byte x) {
        LapData.m_numPitStops$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_sector$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sector"));
    public static VarHandle m_sector$VH() {
        return LapData.m_sector$VH;
    }
    public static byte m_sector$get(MemorySegment seg) {
        return (byte)LapData.m_sector$VH.get(seg);
    }
    public static void m_sector$set( MemorySegment seg, byte x) {
        LapData.m_sector$VH.set(seg, x);
    }
    public static byte m_sector$get(MemorySegment seg, long index) {
        return (byte)LapData.m_sector$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sector$set(MemorySegment seg, long index, byte x) {
        LapData.m_sector$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_currentLapInvalid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_currentLapInvalid"));
    public static VarHandle m_currentLapInvalid$VH() {
        return LapData.m_currentLapInvalid$VH;
    }
    public static byte m_currentLapInvalid$get(MemorySegment seg) {
        return (byte)LapData.m_currentLapInvalid$VH.get(seg);
    }
    public static void m_currentLapInvalid$set( MemorySegment seg, byte x) {
        LapData.m_currentLapInvalid$VH.set(seg, x);
    }
    public static byte m_currentLapInvalid$get(MemorySegment seg, long index) {
        return (byte)LapData.m_currentLapInvalid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_currentLapInvalid$set(MemorySegment seg, long index, byte x) {
        LapData.m_currentLapInvalid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_penalties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_penalties"));
    public static VarHandle m_penalties$VH() {
        return LapData.m_penalties$VH;
    }
    public static byte m_penalties$get(MemorySegment seg) {
        return (byte)LapData.m_penalties$VH.get(seg);
    }
    public static void m_penalties$set( MemorySegment seg, byte x) {
        LapData.m_penalties$VH.set(seg, x);
    }
    public static byte m_penalties$get(MemorySegment seg, long index) {
        return (byte)LapData.m_penalties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_penalties$set(MemorySegment seg, long index, byte x) {
        LapData.m_penalties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_warnings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_warnings"));
    public static VarHandle m_warnings$VH() {
        return LapData.m_warnings$VH;
    }
    public static byte m_warnings$get(MemorySegment seg) {
        return (byte)LapData.m_warnings$VH.get(seg);
    }
    public static void m_warnings$set( MemorySegment seg, byte x) {
        LapData.m_warnings$VH.set(seg, x);
    }
    public static byte m_warnings$get(MemorySegment seg, long index) {
        return (byte)LapData.m_warnings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_warnings$set(MemorySegment seg, long index, byte x) {
        LapData.m_warnings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numUnservedDriveThroughPens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numUnservedDriveThroughPens"));
    public static VarHandle m_numUnservedDriveThroughPens$VH() {
        return LapData.m_numUnservedDriveThroughPens$VH;
    }
    public static byte m_numUnservedDriveThroughPens$get(MemorySegment seg) {
        return (byte)LapData.m_numUnservedDriveThroughPens$VH.get(seg);
    }
    public static void m_numUnservedDriveThroughPens$set( MemorySegment seg, byte x) {
        LapData.m_numUnservedDriveThroughPens$VH.set(seg, x);
    }
    public static byte m_numUnservedDriveThroughPens$get(MemorySegment seg, long index) {
        return (byte)LapData.m_numUnservedDriveThroughPens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numUnservedDriveThroughPens$set(MemorySegment seg, long index, byte x) {
        LapData.m_numUnservedDriveThroughPens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_numUnservedStopGoPens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_numUnservedStopGoPens"));
    public static VarHandle m_numUnservedStopGoPens$VH() {
        return LapData.m_numUnservedStopGoPens$VH;
    }
    public static byte m_numUnservedStopGoPens$get(MemorySegment seg) {
        return (byte)LapData.m_numUnservedStopGoPens$VH.get(seg);
    }
    public static void m_numUnservedStopGoPens$set( MemorySegment seg, byte x) {
        LapData.m_numUnservedStopGoPens$VH.set(seg, x);
    }
    public static byte m_numUnservedStopGoPens$get(MemorySegment seg, long index) {
        return (byte)LapData.m_numUnservedStopGoPens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_numUnservedStopGoPens$set(MemorySegment seg, long index, byte x) {
        LapData.m_numUnservedStopGoPens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_gridPosition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_gridPosition"));
    public static VarHandle m_gridPosition$VH() {
        return LapData.m_gridPosition$VH;
    }
    public static byte m_gridPosition$get(MemorySegment seg) {
        return (byte)LapData.m_gridPosition$VH.get(seg);
    }
    public static void m_gridPosition$set( MemorySegment seg, byte x) {
        LapData.m_gridPosition$VH.set(seg, x);
    }
    public static byte m_gridPosition$get(MemorySegment seg, long index) {
        return (byte)LapData.m_gridPosition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_gridPosition$set(MemorySegment seg, long index, byte x) {
        LapData.m_gridPosition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_driverStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_driverStatus"));
    public static VarHandle m_driverStatus$VH() {
        return LapData.m_driverStatus$VH;
    }
    public static byte m_driverStatus$get(MemorySegment seg) {
        return (byte)LapData.m_driverStatus$VH.get(seg);
    }
    public static void m_driverStatus$set( MemorySegment seg, byte x) {
        LapData.m_driverStatus$VH.set(seg, x);
    }
    public static byte m_driverStatus$get(MemorySegment seg, long index) {
        return (byte)LapData.m_driverStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_driverStatus$set(MemorySegment seg, long index, byte x) {
        LapData.m_driverStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_resultStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_resultStatus"));
    public static VarHandle m_resultStatus$VH() {
        return LapData.m_resultStatus$VH;
    }
    public static byte m_resultStatus$get(MemorySegment seg) {
        return (byte)LapData.m_resultStatus$VH.get(seg);
    }
    public static void m_resultStatus$set( MemorySegment seg, byte x) {
        LapData.m_resultStatus$VH.set(seg, x);
    }
    public static byte m_resultStatus$get(MemorySegment seg, long index) {
        return (byte)LapData.m_resultStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_resultStatus$set(MemorySegment seg, long index, byte x) {
        LapData.m_resultStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitLaneTimerActive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitLaneTimerActive"));
    public static VarHandle m_pitLaneTimerActive$VH() {
        return LapData.m_pitLaneTimerActive$VH;
    }
    public static byte m_pitLaneTimerActive$get(MemorySegment seg) {
        return (byte)LapData.m_pitLaneTimerActive$VH.get(seg);
    }
    public static void m_pitLaneTimerActive$set( MemorySegment seg, byte x) {
        LapData.m_pitLaneTimerActive$VH.set(seg, x);
    }
    public static byte m_pitLaneTimerActive$get(MemorySegment seg, long index) {
        return (byte)LapData.m_pitLaneTimerActive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitLaneTimerActive$set(MemorySegment seg, long index, byte x) {
        LapData.m_pitLaneTimerActive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitLaneTimeInLaneInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitLaneTimeInLaneInMS"));
    public static VarHandle m_pitLaneTimeInLaneInMS$VH() {
        return LapData.m_pitLaneTimeInLaneInMS$VH;
    }
    public static short m_pitLaneTimeInLaneInMS$get(MemorySegment seg) {
        return (short)LapData.m_pitLaneTimeInLaneInMS$VH.get(seg);
    }
    public static void m_pitLaneTimeInLaneInMS$set( MemorySegment seg, short x) {
        LapData.m_pitLaneTimeInLaneInMS$VH.set(seg, x);
    }
    public static short m_pitLaneTimeInLaneInMS$get(MemorySegment seg, long index) {
        return (short)LapData.m_pitLaneTimeInLaneInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitLaneTimeInLaneInMS$set(MemorySegment seg, long index, short x) {
        LapData.m_pitLaneTimeInLaneInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStopTimerInMS$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStopTimerInMS"));
    public static VarHandle m_pitStopTimerInMS$VH() {
        return LapData.m_pitStopTimerInMS$VH;
    }
    public static short m_pitStopTimerInMS$get(MemorySegment seg) {
        return (short)LapData.m_pitStopTimerInMS$VH.get(seg);
    }
    public static void m_pitStopTimerInMS$set( MemorySegment seg, short x) {
        LapData.m_pitStopTimerInMS$VH.set(seg, x);
    }
    public static short m_pitStopTimerInMS$get(MemorySegment seg, long index) {
        return (short)LapData.m_pitStopTimerInMS$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStopTimerInMS$set(MemorySegment seg, long index, short x) {
        LapData.m_pitStopTimerInMS$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitStopShouldServePen$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitStopShouldServePen"));
    public static VarHandle m_pitStopShouldServePen$VH() {
        return LapData.m_pitStopShouldServePen$VH;
    }
    public static byte m_pitStopShouldServePen$get(MemorySegment seg) {
        return (byte)LapData.m_pitStopShouldServePen$VH.get(seg);
    }
    public static void m_pitStopShouldServePen$set( MemorySegment seg, byte x) {
        LapData.m_pitStopShouldServePen$VH.set(seg, x);
    }
    public static byte m_pitStopShouldServePen$get(MemorySegment seg, long index) {
        return (byte)LapData.m_pitStopShouldServePen$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitStopShouldServePen$set(MemorySegment seg, long index, byte x) {
        LapData.m_pitStopShouldServePen$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


