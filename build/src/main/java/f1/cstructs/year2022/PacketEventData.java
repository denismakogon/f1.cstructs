// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketEventData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("m_eventStringCode"),
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
                Constants$root.C_FLOAT$LAYOUT.withName("lapTime")
            ).withName("m_fastestLap"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
            ).withName("m_retirement"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
            ).withName("m_teamMateInPits"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
            ).withName("m_raceWinner"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("penaltyType"),
                Constants$root.C_CHAR$LAYOUT.withName("infringementType"),
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
                Constants$root.C_CHAR$LAYOUT.withName("otherVehicleIdx"),
                Constants$root.C_CHAR$LAYOUT.withName("time"),
                Constants$root.C_CHAR$LAYOUT.withName("lapNum"),
                Constants$root.C_CHAR$LAYOUT.withName("placesGained")
            ).withName("m_penalty"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
                Constants$root.C_FLOAT$LAYOUT.withName("speed"),
                Constants$root.C_CHAR$LAYOUT.withName("isOverallFastestInSession"),
                Constants$root.C_CHAR$LAYOUT.withName("isDriverFastestInSession"),
                Constants$root.C_CHAR$LAYOUT.withName("fastestVehicleIdxInSession"),
                Constants$root.C_FLOAT$LAYOUT.withName("fastestSpeedInSession")
            ).withName("m_speedTrap"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("numLights")
            ).withName("m_startLIghts"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
            ).withName("m_driveThroughPenaltyServed"),
            MemoryLayout.structLayout(
                Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
            ).withName("m_stopGoPenaltyServed"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("flashbackFrameIdentifier"),
                Constants$root.C_FLOAT$LAYOUT.withName("flashbackSessionTime")
            ).withName("m_flashback"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("m_buttonStatus")
            ).withName("m_buttons")
        ).withName("m_eventDetails")
    ).withName("PacketEventData");
    public static MemoryLayout $LAYOUT() {
        return PacketEventData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment m_eventStringCode$slice(MemorySegment seg) {
        return seg.asSlice(24, 4);
    }
    public static MemorySegment m_eventDetails$slice(MemorySegment seg) {
        return seg.asSlice(28, 12);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


