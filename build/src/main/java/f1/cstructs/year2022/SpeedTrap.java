// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class SpeedTrap {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
        Constants$root.C_FLOAT$LAYOUT.withName("speed"),
        Constants$root.C_CHAR$LAYOUT.withName("isOverallFastestInSession"),
        Constants$root.C_CHAR$LAYOUT.withName("isDriverFastestInSession"),
        Constants$root.C_CHAR$LAYOUT.withName("fastestVehicleIdxInSession"),
        Constants$root.C_FLOAT$LAYOUT.withName("fastestSpeedInSession")
    ).withName("SpeedTrap");
    public static MemoryLayout $LAYOUT() {
        return SpeedTrap.$struct$LAYOUT;
    }
    static final VarHandle vehicleIdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vehicleIdx"));
    public static VarHandle vehicleIdx$VH() {
        return SpeedTrap.vehicleIdx$VH;
    }
    public static byte vehicleIdx$get(MemorySegment seg) {
        return (byte)SpeedTrap.vehicleIdx$VH.get(seg);
    }
    public static void vehicleIdx$set( MemorySegment seg, byte x) {
        SpeedTrap.vehicleIdx$VH.set(seg, x);
    }
    public static byte vehicleIdx$get(MemorySegment seg, long index) {
        return (byte)SpeedTrap.vehicleIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vehicleIdx$set(MemorySegment seg, long index, byte x) {
        SpeedTrap.vehicleIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle speed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("speed"));
    public static VarHandle speed$VH() {
        return SpeedTrap.speed$VH;
    }
    public static float speed$get(MemorySegment seg) {
        return (float)SpeedTrap.speed$VH.get(seg);
    }
    public static void speed$set( MemorySegment seg, float x) {
        SpeedTrap.speed$VH.set(seg, x);
    }
    public static float speed$get(MemorySegment seg, long index) {
        return (float)SpeedTrap.speed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void speed$set(MemorySegment seg, long index, float x) {
        SpeedTrap.speed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle isOverallFastestInSession$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("isOverallFastestInSession"));
    public static VarHandle isOverallFastestInSession$VH() {
        return SpeedTrap.isOverallFastestInSession$VH;
    }
    public static byte isOverallFastestInSession$get(MemorySegment seg) {
        return (byte)SpeedTrap.isOverallFastestInSession$VH.get(seg);
    }
    public static void isOverallFastestInSession$set( MemorySegment seg, byte x) {
        SpeedTrap.isOverallFastestInSession$VH.set(seg, x);
    }
    public static byte isOverallFastestInSession$get(MemorySegment seg, long index) {
        return (byte)SpeedTrap.isOverallFastestInSession$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void isOverallFastestInSession$set(MemorySegment seg, long index, byte x) {
        SpeedTrap.isOverallFastestInSession$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle isDriverFastestInSession$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("isDriverFastestInSession"));
    public static VarHandle isDriverFastestInSession$VH() {
        return SpeedTrap.isDriverFastestInSession$VH;
    }
    public static byte isDriverFastestInSession$get(MemorySegment seg) {
        return (byte)SpeedTrap.isDriverFastestInSession$VH.get(seg);
    }
    public static void isDriverFastestInSession$set( MemorySegment seg, byte x) {
        SpeedTrap.isDriverFastestInSession$VH.set(seg, x);
    }
    public static byte isDriverFastestInSession$get(MemorySegment seg, long index) {
        return (byte)SpeedTrap.isDriverFastestInSession$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void isDriverFastestInSession$set(MemorySegment seg, long index, byte x) {
        SpeedTrap.isDriverFastestInSession$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fastestVehicleIdxInSession$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fastestVehicleIdxInSession"));
    public static VarHandle fastestVehicleIdxInSession$VH() {
        return SpeedTrap.fastestVehicleIdxInSession$VH;
    }
    public static byte fastestVehicleIdxInSession$get(MemorySegment seg) {
        return (byte)SpeedTrap.fastestVehicleIdxInSession$VH.get(seg);
    }
    public static void fastestVehicleIdxInSession$set( MemorySegment seg, byte x) {
        SpeedTrap.fastestVehicleIdxInSession$VH.set(seg, x);
    }
    public static byte fastestVehicleIdxInSession$get(MemorySegment seg, long index) {
        return (byte)SpeedTrap.fastestVehicleIdxInSession$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fastestVehicleIdxInSession$set(MemorySegment seg, long index, byte x) {
        SpeedTrap.fastestVehicleIdxInSession$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fastestSpeedInSession$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fastestSpeedInSession"));
    public static VarHandle fastestSpeedInSession$VH() {
        return SpeedTrap.fastestSpeedInSession$VH;
    }
    public static float fastestSpeedInSession$get(MemorySegment seg) {
        return (float)SpeedTrap.fastestSpeedInSession$VH.get(seg);
    }
    public static void fastestSpeedInSession$set( MemorySegment seg, float x) {
        SpeedTrap.fastestSpeedInSession$VH.set(seg, x);
    }
    public static float fastestSpeedInSession$get(MemorySegment seg, long index) {
        return (float)SpeedTrap.fastestSpeedInSession$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fastestSpeedInSession$set(MemorySegment seg, long index, float x) {
        SpeedTrap.fastestSpeedInSession$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


