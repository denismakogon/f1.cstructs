// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketCarTelemetryData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        MemoryLayout.sequenceLayout(22, MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_speed"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_throttle"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_steer"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_brake"),
            Constants$root.C_CHAR$LAYOUT.withName("m_clutch"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gear"),
            Constants$root.C_SHORT$LAYOUT.withName("m_engineRPM"),
            Constants$root.C_CHAR$LAYOUT.withName("m_drs"),
            Constants$root.C_CHAR$LAYOUT.withName("m_revLightsPercent"),
            Constants$root.C_SHORT$LAYOUT.withName("m_revLightsBitValue"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_SHORT$LAYOUT).withName("m_brakesTemperature"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("m_tyresSurfaceTemperature"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("m_tyresInnerTemperature"),
            Constants$root.C_SHORT$LAYOUT.withName("m_engineTemperature"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_FLOAT$LAYOUT).withName("m_tyresPressure"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("m_surfaceType")
        ).withName("CarTelemetryData")).withName("m_carTelemetryData"),
        Constants$root.C_CHAR$LAYOUT.withName("m_mfdPanelIndex"),
        Constants$root.C_CHAR$LAYOUT.withName("m_mfdPanelIndexSecondaryPlayer"),
        Constants$root.C_CHAR$LAYOUT.withName("m_suggestedGear")
    ).withName("PacketCarTelemetryData");
    public static MemoryLayout $LAYOUT() {
        return PacketCarTelemetryData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment m_carTelemetryData$slice(MemorySegment seg) {
        return seg.asSlice(24, 1320);
    }
    static final VarHandle m_mfdPanelIndex$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_mfdPanelIndex"));
    public static VarHandle m_mfdPanelIndex$VH() {
        return PacketCarTelemetryData.m_mfdPanelIndex$VH;
    }
    public static byte m_mfdPanelIndex$get(MemorySegment seg) {
        return (byte)PacketCarTelemetryData.m_mfdPanelIndex$VH.get(seg);
    }
    public static void m_mfdPanelIndex$set( MemorySegment seg, byte x) {
        PacketCarTelemetryData.m_mfdPanelIndex$VH.set(seg, x);
    }
    public static byte m_mfdPanelIndex$get(MemorySegment seg, long index) {
        return (byte)PacketCarTelemetryData.m_mfdPanelIndex$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_mfdPanelIndex$set(MemorySegment seg, long index, byte x) {
        PacketCarTelemetryData.m_mfdPanelIndex$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_mfdPanelIndexSecondaryPlayer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_mfdPanelIndexSecondaryPlayer"));
    public static VarHandle m_mfdPanelIndexSecondaryPlayer$VH() {
        return PacketCarTelemetryData.m_mfdPanelIndexSecondaryPlayer$VH;
    }
    public static byte m_mfdPanelIndexSecondaryPlayer$get(MemorySegment seg) {
        return (byte)PacketCarTelemetryData.m_mfdPanelIndexSecondaryPlayer$VH.get(seg);
    }
    public static void m_mfdPanelIndexSecondaryPlayer$set( MemorySegment seg, byte x) {
        PacketCarTelemetryData.m_mfdPanelIndexSecondaryPlayer$VH.set(seg, x);
    }
    public static byte m_mfdPanelIndexSecondaryPlayer$get(MemorySegment seg, long index) {
        return (byte)PacketCarTelemetryData.m_mfdPanelIndexSecondaryPlayer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_mfdPanelIndexSecondaryPlayer$set(MemorySegment seg, long index, byte x) {
        PacketCarTelemetryData.m_mfdPanelIndexSecondaryPlayer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_suggestedGear$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_suggestedGear"));
    public static VarHandle m_suggestedGear$VH() {
        return PacketCarTelemetryData.m_suggestedGear$VH;
    }
    public static byte m_suggestedGear$get(MemorySegment seg) {
        return (byte)PacketCarTelemetryData.m_suggestedGear$VH.get(seg);
    }
    public static void m_suggestedGear$set( MemorySegment seg, byte x) {
        PacketCarTelemetryData.m_suggestedGear$VH.set(seg, x);
    }
    public static byte m_suggestedGear$get(MemorySegment seg, long index) {
        return (byte)PacketCarTelemetryData.m_suggestedGear$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_suggestedGear$set(MemorySegment seg, long index, byte x) {
        PacketCarTelemetryData.m_suggestedGear$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


