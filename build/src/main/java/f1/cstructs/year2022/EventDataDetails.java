// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class EventDataDetails {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
            Constants$root.C_FLOAT$LAYOUT.withName("lapTime")
        ).withName("m_fastestLap"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
        ).withName("m_retirement"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
        ).withName("m_teamMateInPits"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
        ).withName("m_raceWinner"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("penaltyType"),
            Constants$root.C_CHAR$LAYOUT.withName("infringementType"),
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
            Constants$root.C_CHAR$LAYOUT.withName("otherVehicleIdx"),
            Constants$root.C_CHAR$LAYOUT.withName("time"),
            Constants$root.C_CHAR$LAYOUT.withName("lapNum"),
            Constants$root.C_CHAR$LAYOUT.withName("placesGained")
        ).withName("m_penalty"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx"),
            Constants$root.C_FLOAT$LAYOUT.withName("speed"),
            Constants$root.C_CHAR$LAYOUT.withName("isOverallFastestInSession"),
            Constants$root.C_CHAR$LAYOUT.withName("isDriverFastestInSession"),
            Constants$root.C_CHAR$LAYOUT.withName("fastestVehicleIdxInSession"),
            Constants$root.C_FLOAT$LAYOUT.withName("fastestSpeedInSession")
        ).withName("m_speedTrap"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("numLights")
        ).withName("m_startLIghts"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
        ).withName("m_driveThroughPenaltyServed"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("vehicleIdx")
        ).withName("m_stopGoPenaltyServed"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("flashbackFrameIdentifier"),
            Constants$root.C_FLOAT$LAYOUT.withName("flashbackSessionTime")
        ).withName("m_flashback"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("m_buttonStatus")
        ).withName("m_buttons")
    ).withName("EventDataDetails");
    public static MemoryLayout $LAYOUT() {
        return EventDataDetails.$union$LAYOUT;
    }
    public static MemorySegment m_fastestLap$slice(MemorySegment seg) {
        return seg.asSlice(0, 5);
    }
    public static MemorySegment m_retirement$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_teamMateInPits$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_raceWinner$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_penalty$slice(MemorySegment seg) {
        return seg.asSlice(0, 7);
    }
    public static MemorySegment m_speedTrap$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    public static MemorySegment m_startLIghts$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_driveThroughPenaltyServed$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_stopGoPenaltyServed$slice(MemorySegment seg) {
        return seg.asSlice(0, 1);
    }
    public static MemorySegment m_flashback$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment m_buttons$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


