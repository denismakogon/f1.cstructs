// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class WeatherForecastSample {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("m_sessionType"),
        Constants$root.C_CHAR$LAYOUT.withName("m_timeOffset"),
        Constants$root.C_CHAR$LAYOUT.withName("m_weather"),
        Constants$root.C_CHAR$LAYOUT.withName("m_trackTemperature"),
        Constants$root.C_CHAR$LAYOUT.withName("m_trackTemperatureChange"),
        Constants$root.C_CHAR$LAYOUT.withName("m_airTemperature"),
        Constants$root.C_CHAR$LAYOUT.withName("m_airTemperatureChange"),
        Constants$root.C_CHAR$LAYOUT.withName("m_rainPercentage")
    ).withName("WeatherForecastSample");
    public static MemoryLayout $LAYOUT() {
        return WeatherForecastSample.$struct$LAYOUT;
    }
    static final VarHandle m_sessionType$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_sessionType"));
    public static VarHandle m_sessionType$VH() {
        return WeatherForecastSample.m_sessionType$VH;
    }
    public static byte m_sessionType$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_sessionType$VH.get(seg);
    }
    public static void m_sessionType$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_sessionType$VH.set(seg, x);
    }
    public static byte m_sessionType$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_sessionType$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_sessionType$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_sessionType$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_timeOffset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_timeOffset"));
    public static VarHandle m_timeOffset$VH() {
        return WeatherForecastSample.m_timeOffset$VH;
    }
    public static byte m_timeOffset$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_timeOffset$VH.get(seg);
    }
    public static void m_timeOffset$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_timeOffset$VH.set(seg, x);
    }
    public static byte m_timeOffset$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_timeOffset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_timeOffset$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_timeOffset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_weather$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_weather"));
    public static VarHandle m_weather$VH() {
        return WeatherForecastSample.m_weather$VH;
    }
    public static byte m_weather$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_weather$VH.get(seg);
    }
    public static void m_weather$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_weather$VH.set(seg, x);
    }
    public static byte m_weather$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_weather$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_weather$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_weather$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_trackTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_trackTemperature"));
    public static VarHandle m_trackTemperature$VH() {
        return WeatherForecastSample.m_trackTemperature$VH;
    }
    public static byte m_trackTemperature$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_trackTemperature$VH.get(seg);
    }
    public static void m_trackTemperature$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_trackTemperature$VH.set(seg, x);
    }
    public static byte m_trackTemperature$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_trackTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_trackTemperature$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_trackTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_trackTemperatureChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_trackTemperatureChange"));
    public static VarHandle m_trackTemperatureChange$VH() {
        return WeatherForecastSample.m_trackTemperatureChange$VH;
    }
    public static byte m_trackTemperatureChange$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_trackTemperatureChange$VH.get(seg);
    }
    public static void m_trackTemperatureChange$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_trackTemperatureChange$VH.set(seg, x);
    }
    public static byte m_trackTemperatureChange$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_trackTemperatureChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_trackTemperatureChange$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_trackTemperatureChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_airTemperature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_airTemperature"));
    public static VarHandle m_airTemperature$VH() {
        return WeatherForecastSample.m_airTemperature$VH;
    }
    public static byte m_airTemperature$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_airTemperature$VH.get(seg);
    }
    public static void m_airTemperature$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_airTemperature$VH.set(seg, x);
    }
    public static byte m_airTemperature$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_airTemperature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_airTemperature$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_airTemperature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_airTemperatureChange$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_airTemperatureChange"));
    public static VarHandle m_airTemperatureChange$VH() {
        return WeatherForecastSample.m_airTemperatureChange$VH;
    }
    public static byte m_airTemperatureChange$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_airTemperatureChange$VH.get(seg);
    }
    public static void m_airTemperatureChange$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_airTemperatureChange$VH.set(seg, x);
    }
    public static byte m_airTemperatureChange$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_airTemperatureChange$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_airTemperatureChange$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_airTemperatureChange$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_rainPercentage$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_rainPercentage"));
    public static VarHandle m_rainPercentage$VH() {
        return WeatherForecastSample.m_rainPercentage$VH;
    }
    public static byte m_rainPercentage$get(MemorySegment seg) {
        return (byte)WeatherForecastSample.m_rainPercentage$VH.get(seg);
    }
    public static void m_rainPercentage$set( MemorySegment seg, byte x) {
        WeatherForecastSample.m_rainPercentage$VH.set(seg, x);
    }
    public static byte m_rainPercentage$get(MemorySegment seg, long index) {
        return (byte)WeatherForecastSample.m_rainPercentage$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_rainPercentage$set(MemorySegment seg, long index, byte x) {
        WeatherForecastSample.m_rainPercentage$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


