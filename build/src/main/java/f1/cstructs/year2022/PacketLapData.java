// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class PacketLapData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_SHORT$LAYOUT.withName("m_packetFormat"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMajorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gameMinorVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetVersion"),
            Constants$root.C_CHAR$LAYOUT.withName("m_packetId"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("m_sessionUID"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_sessionTime"),
            Constants$root.C_INT$LAYOUT.withName("m_frameIdentifier"),
            Constants$root.C_CHAR$LAYOUT.withName("m_playerCarIndex"),
            Constants$root.C_CHAR$LAYOUT.withName("m_secondaryPlayerCarIndex")
        ).withName("m_header"),
        MemoryLayout.sequenceLayout(22, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("m_lastLapTimeInMS"),
            Constants$root.C_INT$LAYOUT.withName("m_currentLapTimeInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_sector1TimeInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_sector2TimeInMS"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_lapDistance"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_totalDistance"),
            Constants$root.C_FLOAT$LAYOUT.withName("m_safetyCarDelta"),
            Constants$root.C_CHAR$LAYOUT.withName("m_carPosition"),
            Constants$root.C_CHAR$LAYOUT.withName("m_currentLapNum"),
            Constants$root.C_CHAR$LAYOUT.withName("m_pitStatus"),
            Constants$root.C_CHAR$LAYOUT.withName("m_numPitStops"),
            Constants$root.C_CHAR$LAYOUT.withName("m_sector"),
            Constants$root.C_CHAR$LAYOUT.withName("m_currentLapInvalid"),
            Constants$root.C_CHAR$LAYOUT.withName("m_penalties"),
            Constants$root.C_CHAR$LAYOUT.withName("m_warnings"),
            Constants$root.C_CHAR$LAYOUT.withName("m_numUnservedDriveThroughPens"),
            Constants$root.C_CHAR$LAYOUT.withName("m_numUnservedStopGoPens"),
            Constants$root.C_CHAR$LAYOUT.withName("m_gridPosition"),
            Constants$root.C_CHAR$LAYOUT.withName("m_driverStatus"),
            Constants$root.C_CHAR$LAYOUT.withName("m_resultStatus"),
            Constants$root.C_CHAR$LAYOUT.withName("m_pitLaneTimerActive"),
            Constants$root.C_SHORT$LAYOUT.withName("m_pitLaneTimeInLaneInMS"),
            Constants$root.C_SHORT$LAYOUT.withName("m_pitStopTimerInMS"),
            Constants$root.C_CHAR$LAYOUT.withName("m_pitStopShouldServePen")
        ).withName("LapData")).withName("m_lapData"),
        Constants$root.C_CHAR$LAYOUT.withName("m_timeTrialPBCarIdx"),
        Constants$root.C_CHAR$LAYOUT.withName("m_timeTrialRivalCarIdx")
    ).withName("PacketLapData");
    public static MemoryLayout $LAYOUT() {
        return PacketLapData.$struct$LAYOUT;
    }
    public static MemorySegment m_header$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment m_lapData$slice(MemorySegment seg) {
        return seg.asSlice(24, 946);
    }
    static final VarHandle m_timeTrialPBCarIdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_timeTrialPBCarIdx"));
    public static VarHandle m_timeTrialPBCarIdx$VH() {
        return PacketLapData.m_timeTrialPBCarIdx$VH;
    }
    public static byte m_timeTrialPBCarIdx$get(MemorySegment seg) {
        return (byte)PacketLapData.m_timeTrialPBCarIdx$VH.get(seg);
    }
    public static void m_timeTrialPBCarIdx$set( MemorySegment seg, byte x) {
        PacketLapData.m_timeTrialPBCarIdx$VH.set(seg, x);
    }
    public static byte m_timeTrialPBCarIdx$get(MemorySegment seg, long index) {
        return (byte)PacketLapData.m_timeTrialPBCarIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_timeTrialPBCarIdx$set(MemorySegment seg, long index, byte x) {
        PacketLapData.m_timeTrialPBCarIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_timeTrialRivalCarIdx$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_timeTrialRivalCarIdx"));
    public static VarHandle m_timeTrialRivalCarIdx$VH() {
        return PacketLapData.m_timeTrialRivalCarIdx$VH;
    }
    public static byte m_timeTrialRivalCarIdx$get(MemorySegment seg) {
        return (byte)PacketLapData.m_timeTrialRivalCarIdx$VH.get(seg);
    }
    public static void m_timeTrialRivalCarIdx$set( MemorySegment seg, byte x) {
        PacketLapData.m_timeTrialRivalCarIdx$VH.set(seg, x);
    }
    public static byte m_timeTrialRivalCarIdx$get(MemorySegment seg, long index) {
        return (byte)PacketLapData.m_timeTrialRivalCarIdx$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_timeTrialRivalCarIdx$set(MemorySegment seg, long index, byte x) {
        PacketLapData.m_timeTrialRivalCarIdx$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


