// Generated by jextract

package f1.cstructs.year2022;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class CarStatusData {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("m_tractionControl"),
        Constants$root.C_CHAR$LAYOUT.withName("m_antiLockBrakes"),
        Constants$root.C_CHAR$LAYOUT.withName("m_fuelMix"),
        Constants$root.C_CHAR$LAYOUT.withName("m_frontBrakeBias"),
        Constants$root.C_CHAR$LAYOUT.withName("m_pitLimiterStatus"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_fuelInTank"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_fuelCapacity"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_fuelRemainingLaps"),
        Constants$root.C_SHORT$LAYOUT.withName("m_maxRPM"),
        Constants$root.C_SHORT$LAYOUT.withName("m_idleRPM"),
        Constants$root.C_CHAR$LAYOUT.withName("m_maxGears"),
        Constants$root.C_CHAR$LAYOUT.withName("m_drsAllowed"),
        Constants$root.C_SHORT$LAYOUT.withName("m_drsActivationDistance"),
        Constants$root.C_CHAR$LAYOUT.withName("m_actualTyreCompound"),
        Constants$root.C_CHAR$LAYOUT.withName("m_visualTyreCompound"),
        Constants$root.C_CHAR$LAYOUT.withName("m_tyresAgeLaps"),
        Constants$root.C_CHAR$LAYOUT.withName("m_vehicleFiaFlags"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_ersStoreEnergy"),
        Constants$root.C_CHAR$LAYOUT.withName("m_ersDeployMode"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_ersHarvestedThisLapMGUK"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_ersHarvestedThisLapMGUH"),
        Constants$root.C_FLOAT$LAYOUT.withName("m_ersDeployedThisLap"),
        Constants$root.C_CHAR$LAYOUT.withName("m_networkPaused")
    ).withName("CarStatusData");
    public static MemoryLayout $LAYOUT() {
        return CarStatusData.$struct$LAYOUT;
    }
    static final VarHandle m_tractionControl$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_tractionControl"));
    public static VarHandle m_tractionControl$VH() {
        return CarStatusData.m_tractionControl$VH;
    }
    public static byte m_tractionControl$get(MemorySegment seg) {
        return (byte)CarStatusData.m_tractionControl$VH.get(seg);
    }
    public static void m_tractionControl$set( MemorySegment seg, byte x) {
        CarStatusData.m_tractionControl$VH.set(seg, x);
    }
    public static byte m_tractionControl$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_tractionControl$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_tractionControl$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_tractionControl$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_antiLockBrakes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_antiLockBrakes"));
    public static VarHandle m_antiLockBrakes$VH() {
        return CarStatusData.m_antiLockBrakes$VH;
    }
    public static byte m_antiLockBrakes$get(MemorySegment seg) {
        return (byte)CarStatusData.m_antiLockBrakes$VH.get(seg);
    }
    public static void m_antiLockBrakes$set( MemorySegment seg, byte x) {
        CarStatusData.m_antiLockBrakes$VH.set(seg, x);
    }
    public static byte m_antiLockBrakes$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_antiLockBrakes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_antiLockBrakes$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_antiLockBrakes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_fuelMix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_fuelMix"));
    public static VarHandle m_fuelMix$VH() {
        return CarStatusData.m_fuelMix$VH;
    }
    public static byte m_fuelMix$get(MemorySegment seg) {
        return (byte)CarStatusData.m_fuelMix$VH.get(seg);
    }
    public static void m_fuelMix$set( MemorySegment seg, byte x) {
        CarStatusData.m_fuelMix$VH.set(seg, x);
    }
    public static byte m_fuelMix$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_fuelMix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_fuelMix$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_fuelMix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_frontBrakeBias$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_frontBrakeBias"));
    public static VarHandle m_frontBrakeBias$VH() {
        return CarStatusData.m_frontBrakeBias$VH;
    }
    public static byte m_frontBrakeBias$get(MemorySegment seg) {
        return (byte)CarStatusData.m_frontBrakeBias$VH.get(seg);
    }
    public static void m_frontBrakeBias$set( MemorySegment seg, byte x) {
        CarStatusData.m_frontBrakeBias$VH.set(seg, x);
    }
    public static byte m_frontBrakeBias$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_frontBrakeBias$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_frontBrakeBias$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_frontBrakeBias$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_pitLimiterStatus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_pitLimiterStatus"));
    public static VarHandle m_pitLimiterStatus$VH() {
        return CarStatusData.m_pitLimiterStatus$VH;
    }
    public static byte m_pitLimiterStatus$get(MemorySegment seg) {
        return (byte)CarStatusData.m_pitLimiterStatus$VH.get(seg);
    }
    public static void m_pitLimiterStatus$set( MemorySegment seg, byte x) {
        CarStatusData.m_pitLimiterStatus$VH.set(seg, x);
    }
    public static byte m_pitLimiterStatus$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_pitLimiterStatus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_pitLimiterStatus$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_pitLimiterStatus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_fuelInTank$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_fuelInTank"));
    public static VarHandle m_fuelInTank$VH() {
        return CarStatusData.m_fuelInTank$VH;
    }
    public static float m_fuelInTank$get(MemorySegment seg) {
        return (float)CarStatusData.m_fuelInTank$VH.get(seg);
    }
    public static void m_fuelInTank$set( MemorySegment seg, float x) {
        CarStatusData.m_fuelInTank$VH.set(seg, x);
    }
    public static float m_fuelInTank$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_fuelInTank$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_fuelInTank$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_fuelInTank$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_fuelCapacity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_fuelCapacity"));
    public static VarHandle m_fuelCapacity$VH() {
        return CarStatusData.m_fuelCapacity$VH;
    }
    public static float m_fuelCapacity$get(MemorySegment seg) {
        return (float)CarStatusData.m_fuelCapacity$VH.get(seg);
    }
    public static void m_fuelCapacity$set( MemorySegment seg, float x) {
        CarStatusData.m_fuelCapacity$VH.set(seg, x);
    }
    public static float m_fuelCapacity$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_fuelCapacity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_fuelCapacity$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_fuelCapacity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_fuelRemainingLaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_fuelRemainingLaps"));
    public static VarHandle m_fuelRemainingLaps$VH() {
        return CarStatusData.m_fuelRemainingLaps$VH;
    }
    public static float m_fuelRemainingLaps$get(MemorySegment seg) {
        return (float)CarStatusData.m_fuelRemainingLaps$VH.get(seg);
    }
    public static void m_fuelRemainingLaps$set( MemorySegment seg, float x) {
        CarStatusData.m_fuelRemainingLaps$VH.set(seg, x);
    }
    public static float m_fuelRemainingLaps$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_fuelRemainingLaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_fuelRemainingLaps$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_fuelRemainingLaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_maxRPM$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_maxRPM"));
    public static VarHandle m_maxRPM$VH() {
        return CarStatusData.m_maxRPM$VH;
    }
    public static short m_maxRPM$get(MemorySegment seg) {
        return (short)CarStatusData.m_maxRPM$VH.get(seg);
    }
    public static void m_maxRPM$set( MemorySegment seg, short x) {
        CarStatusData.m_maxRPM$VH.set(seg, x);
    }
    public static short m_maxRPM$get(MemorySegment seg, long index) {
        return (short)CarStatusData.m_maxRPM$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_maxRPM$set(MemorySegment seg, long index, short x) {
        CarStatusData.m_maxRPM$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_idleRPM$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_idleRPM"));
    public static VarHandle m_idleRPM$VH() {
        return CarStatusData.m_idleRPM$VH;
    }
    public static short m_idleRPM$get(MemorySegment seg) {
        return (short)CarStatusData.m_idleRPM$VH.get(seg);
    }
    public static void m_idleRPM$set( MemorySegment seg, short x) {
        CarStatusData.m_idleRPM$VH.set(seg, x);
    }
    public static short m_idleRPM$get(MemorySegment seg, long index) {
        return (short)CarStatusData.m_idleRPM$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_idleRPM$set(MemorySegment seg, long index, short x) {
        CarStatusData.m_idleRPM$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_maxGears$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_maxGears"));
    public static VarHandle m_maxGears$VH() {
        return CarStatusData.m_maxGears$VH;
    }
    public static byte m_maxGears$get(MemorySegment seg) {
        return (byte)CarStatusData.m_maxGears$VH.get(seg);
    }
    public static void m_maxGears$set( MemorySegment seg, byte x) {
        CarStatusData.m_maxGears$VH.set(seg, x);
    }
    public static byte m_maxGears$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_maxGears$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_maxGears$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_maxGears$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_drsAllowed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_drsAllowed"));
    public static VarHandle m_drsAllowed$VH() {
        return CarStatusData.m_drsAllowed$VH;
    }
    public static byte m_drsAllowed$get(MemorySegment seg) {
        return (byte)CarStatusData.m_drsAllowed$VH.get(seg);
    }
    public static void m_drsAllowed$set( MemorySegment seg, byte x) {
        CarStatusData.m_drsAllowed$VH.set(seg, x);
    }
    public static byte m_drsAllowed$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_drsAllowed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_drsAllowed$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_drsAllowed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_drsActivationDistance$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_drsActivationDistance"));
    public static VarHandle m_drsActivationDistance$VH() {
        return CarStatusData.m_drsActivationDistance$VH;
    }
    public static short m_drsActivationDistance$get(MemorySegment seg) {
        return (short)CarStatusData.m_drsActivationDistance$VH.get(seg);
    }
    public static void m_drsActivationDistance$set( MemorySegment seg, short x) {
        CarStatusData.m_drsActivationDistance$VH.set(seg, x);
    }
    public static short m_drsActivationDistance$get(MemorySegment seg, long index) {
        return (short)CarStatusData.m_drsActivationDistance$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_drsActivationDistance$set(MemorySegment seg, long index, short x) {
        CarStatusData.m_drsActivationDistance$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_actualTyreCompound$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_actualTyreCompound"));
    public static VarHandle m_actualTyreCompound$VH() {
        return CarStatusData.m_actualTyreCompound$VH;
    }
    public static byte m_actualTyreCompound$get(MemorySegment seg) {
        return (byte)CarStatusData.m_actualTyreCompound$VH.get(seg);
    }
    public static void m_actualTyreCompound$set( MemorySegment seg, byte x) {
        CarStatusData.m_actualTyreCompound$VH.set(seg, x);
    }
    public static byte m_actualTyreCompound$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_actualTyreCompound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_actualTyreCompound$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_actualTyreCompound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_visualTyreCompound$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_visualTyreCompound"));
    public static VarHandle m_visualTyreCompound$VH() {
        return CarStatusData.m_visualTyreCompound$VH;
    }
    public static byte m_visualTyreCompound$get(MemorySegment seg) {
        return (byte)CarStatusData.m_visualTyreCompound$VH.get(seg);
    }
    public static void m_visualTyreCompound$set( MemorySegment seg, byte x) {
        CarStatusData.m_visualTyreCompound$VH.set(seg, x);
    }
    public static byte m_visualTyreCompound$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_visualTyreCompound$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_visualTyreCompound$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_visualTyreCompound$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_tyresAgeLaps$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_tyresAgeLaps"));
    public static VarHandle m_tyresAgeLaps$VH() {
        return CarStatusData.m_tyresAgeLaps$VH;
    }
    public static byte m_tyresAgeLaps$get(MemorySegment seg) {
        return (byte)CarStatusData.m_tyresAgeLaps$VH.get(seg);
    }
    public static void m_tyresAgeLaps$set( MemorySegment seg, byte x) {
        CarStatusData.m_tyresAgeLaps$VH.set(seg, x);
    }
    public static byte m_tyresAgeLaps$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_tyresAgeLaps$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_tyresAgeLaps$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_tyresAgeLaps$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_vehicleFiaFlags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_vehicleFiaFlags"));
    public static VarHandle m_vehicleFiaFlags$VH() {
        return CarStatusData.m_vehicleFiaFlags$VH;
    }
    public static byte m_vehicleFiaFlags$get(MemorySegment seg) {
        return (byte)CarStatusData.m_vehicleFiaFlags$VH.get(seg);
    }
    public static void m_vehicleFiaFlags$set( MemorySegment seg, byte x) {
        CarStatusData.m_vehicleFiaFlags$VH.set(seg, x);
    }
    public static byte m_vehicleFiaFlags$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_vehicleFiaFlags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_vehicleFiaFlags$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_vehicleFiaFlags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ersStoreEnergy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ersStoreEnergy"));
    public static VarHandle m_ersStoreEnergy$VH() {
        return CarStatusData.m_ersStoreEnergy$VH;
    }
    public static float m_ersStoreEnergy$get(MemorySegment seg) {
        return (float)CarStatusData.m_ersStoreEnergy$VH.get(seg);
    }
    public static void m_ersStoreEnergy$set( MemorySegment seg, float x) {
        CarStatusData.m_ersStoreEnergy$VH.set(seg, x);
    }
    public static float m_ersStoreEnergy$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_ersStoreEnergy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ersStoreEnergy$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_ersStoreEnergy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ersDeployMode$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ersDeployMode"));
    public static VarHandle m_ersDeployMode$VH() {
        return CarStatusData.m_ersDeployMode$VH;
    }
    public static byte m_ersDeployMode$get(MemorySegment seg) {
        return (byte)CarStatusData.m_ersDeployMode$VH.get(seg);
    }
    public static void m_ersDeployMode$set( MemorySegment seg, byte x) {
        CarStatusData.m_ersDeployMode$VH.set(seg, x);
    }
    public static byte m_ersDeployMode$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_ersDeployMode$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ersDeployMode$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_ersDeployMode$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ersHarvestedThisLapMGUK$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ersHarvestedThisLapMGUK"));
    public static VarHandle m_ersHarvestedThisLapMGUK$VH() {
        return CarStatusData.m_ersHarvestedThisLapMGUK$VH;
    }
    public static float m_ersHarvestedThisLapMGUK$get(MemorySegment seg) {
        return (float)CarStatusData.m_ersHarvestedThisLapMGUK$VH.get(seg);
    }
    public static void m_ersHarvestedThisLapMGUK$set( MemorySegment seg, float x) {
        CarStatusData.m_ersHarvestedThisLapMGUK$VH.set(seg, x);
    }
    public static float m_ersHarvestedThisLapMGUK$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_ersHarvestedThisLapMGUK$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ersHarvestedThisLapMGUK$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_ersHarvestedThisLapMGUK$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ersHarvestedThisLapMGUH$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ersHarvestedThisLapMGUH"));
    public static VarHandle m_ersHarvestedThisLapMGUH$VH() {
        return CarStatusData.m_ersHarvestedThisLapMGUH$VH;
    }
    public static float m_ersHarvestedThisLapMGUH$get(MemorySegment seg) {
        return (float)CarStatusData.m_ersHarvestedThisLapMGUH$VH.get(seg);
    }
    public static void m_ersHarvestedThisLapMGUH$set( MemorySegment seg, float x) {
        CarStatusData.m_ersHarvestedThisLapMGUH$VH.set(seg, x);
    }
    public static float m_ersHarvestedThisLapMGUH$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_ersHarvestedThisLapMGUH$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ersHarvestedThisLapMGUH$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_ersHarvestedThisLapMGUH$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_ersDeployedThisLap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_ersDeployedThisLap"));
    public static VarHandle m_ersDeployedThisLap$VH() {
        return CarStatusData.m_ersDeployedThisLap$VH;
    }
    public static float m_ersDeployedThisLap$get(MemorySegment seg) {
        return (float)CarStatusData.m_ersDeployedThisLap$VH.get(seg);
    }
    public static void m_ersDeployedThisLap$set( MemorySegment seg, float x) {
        CarStatusData.m_ersDeployedThisLap$VH.set(seg, x);
    }
    public static float m_ersDeployedThisLap$get(MemorySegment seg, long index) {
        return (float)CarStatusData.m_ersDeployedThisLap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_ersDeployedThisLap$set(MemorySegment seg, long index, float x) {
        CarStatusData.m_ersDeployedThisLap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle m_networkPaused$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("m_networkPaused"));
    public static VarHandle m_networkPaused$VH() {
        return CarStatusData.m_networkPaused$VH;
    }
    public static byte m_networkPaused$get(MemorySegment seg) {
        return (byte)CarStatusData.m_networkPaused$VH.get(seg);
    }
    public static void m_networkPaused$set( MemorySegment seg, byte x) {
        CarStatusData.m_networkPaused$VH.set(seg, x);
    }
    public static byte m_networkPaused$get(MemorySegment seg, long index) {
        return (byte)CarStatusData.m_networkPaused$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void m_networkPaused$set(MemorySegment seg, long index, byte x) {
        CarStatusData.m_networkPaused$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


